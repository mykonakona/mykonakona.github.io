{"pages":[{"title":"about me","text":"更新历史 2023-02-27 更新博客系统为giscus，后知后觉地将Travis CI替换为Github Actions。 2022-11-22 修复主题字体、引用显示问题，依照规范修复md文件。 2022-11-14 删减了一些博文，更专注记录平时解决的一些问题。 2022-04-21 新增了一个本主题下如何使用blueimpgallery的示例。 2022-01-19 加个统计。 2021-12-13 把相册删了，因为我的图床挂了，而且感觉相册访问起来偏慢，影响了浏览体验（虽然也并不会有人看）。 2021-09-18 差不多是最累的一次更新了，让主题适配了blueimpgallery，因为感觉原来那个相册插件不怎么好看。 2020-05-26 调整minos配色及字体，欢迎fork这个版本。 2020-05-25 评论服务选用Valine。生成并提交sitemap以完成收录。 2020-05-24 完成初步搭建。主题使用minos，通过Travis CI完成自动化部署。","link":"/about/index.html"},{"title":"相册使用说明","text":"本博客主题在原minos主题上进行了一些改动，因此相册的显示效果与原主题有所不同。 使用例配置文件12345678910111213141516171819202122232425262728293031favicon: /images/favicon.icomenu: Archives: /archives Categories: /categories Gallery: /gallery About: /aboutarticle: # Show word count and estimated reading time. readtime: true # Code highlight theme, please see https://highlightjs.org/static/demo/ highlight: atom-one-dark logo: text: mykonakonanavbar_links: RSS: icon: fas fa-rss url: https://mykonakona.github.io/atom.xmlsearch: type: insight# Other plugins and their settings.plugins: mathjax: true katex: false gallery: true clipboard: true 相册页source下新建一../gallery/index.md文件，输入以下内容： 1234567891011---layout: \"blueimpgallery\"comments: false---&lt;div id=\"links\" class=\"links\"&gt;&lt;a href=\"https://che.jakku.top/images/2021/09/17/IMG_20210808_174117.jpg\"&gt;&lt;img loading=\"lazy\" width=\"105\" height=\"105\" src=\"https://che.jakku.top/images/2021/09/17/IMG_20210808_174117.th.jpg\" alt=\"IMG_20210808_174117.th.jpg\" border=\"0\"&gt;&lt;/a&gt;&lt;a href=\"https://che.jakku.top/images/2021/09/17/IMG_20210808_174124.jpg\"&gt;&lt;img loading=\"lazy\" width=\"105\" height=\"105\" src=\"https://che.jakku.top/images/2021/09/17/IMG_20210808_174124.th.jpg\" alt=\"IMG_20210808_174124.th.jpg\" border=\"0\"&gt;&lt;/a&gt;&lt;a href=\"https://che.jakku.top/images/2021/09/17/IMG_20210808_174135.jpg\"&gt;&lt;img loading=\"lazy\" width=\"105\" height=\"105\" src=\"https://che.jakku.top/images/2021/09/17/IMG_20210808_174135.th.jpg\" alt=\"IMG_20210808_174135.th.jpg\" border=\"0\"&gt;&lt;/a&gt;&lt;a href=\"https://che.jakku.top/images/2021/09/17/IMG_20210808_174144.jpg\"&gt;&lt;img loading=\"lazy\" width=\"105\" height=\"105\" src=\"https://che.jakku.top/images/2021/09/17/IMG_20210808_174144.th.jpg\" alt=\"IMG_20210808_174144.th.jpg\" border=\"0\"&gt;&lt;/a&gt;&lt;/div&gt; 效果","link":"/gallery/index.html"}],"posts":[{"title":"Powershell批量Telnet端口脚本","text":"工作时经常需要测试生产机与终端机间的网络是否打通。由于生产机器数量较多，在登录每台终端机时手动telnet测试端口是否打通的方式会消耗较多时间。在这一背景下，产生了使用脚本自动完成该部分工作的需求。 背景在stackoverflow上也有人提出了类似的问题Automate Telnet Port Testing On Windows 7 Using Batch Script 对于操作系统为Windows7的终端机，可以通过编写powershell脚本的方式完成这一任务。以下脚本在该问题答案的基础上，将逐个输入ip及端口进行测试的方法，修改为逐行读取预先准备的文本文档参数的方式。 脚本内容12345678910111213141516171819202122232425262728#powershell ExecutionPolicy Bypass#powershell -File ./t2.ps1$iplist = Get-Content C:\\iplist.txt$regH = \"\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b\"$regP = \"\\s(?&lt;alp&gt;\\d{1,5})\"$remoteHost = \"\"$Port = \"\"foreach ($i in $iplist){ if($i -match $regH){ $remoteHost = $Matches[0]; #write-host \"$remoteHost\"; } if($i -match $regP){ $Port = $Matches.alp; #write-host \"$remotePort\"; } try { $socket = new-object System.Net.Sockets.TcpClient($remoteHost, $port) } catch [Exception] { write-host $remoteHost\":\"$port \"Unconnected`n\" #write-host $_.Exception.GetType().FullName #write-host $_.Exception.Message continue } write-host $remoteHost\":\"$port \"Connected`n\"} 端口及地址的列表文件示例路径 C:\\iplist.txt 的文件内容大致如下： 12127.0.0.1 8080127.0.0.1 80 脚本的执行执行该脚本前，将准备好的iplist.txt放到指定路径下（文中指定的路径为C:\\iplist.txt），再回到powershell下输入以下命令以获得执行权限。 1powershell ExecutionPolicy Bypass 获得权限后，输入如下指令执行该脚本文件。 1powershell -File ./t2.ps1 小结该脚本主要包括三部分工作： 读入准备好的iplist.txt文件 使用正则逐行取出需要测试的ip及端口号 将取出的ip和端口号填入System.Net.Sockets.TcpClient函数中并测试对应的ip及端口其中不同于一般正则的地方的是?&lt;alp&gt;，这部分较通俗的解释可见：PowerShell中正则表达式的运用","link":"/2017-07-07-batch-script-to-test-telnet-connection-in-powershell/"},{"title":"使用用户脚本将Flash播放器替换为HTML5播放器","text":"做这个东西的动机其实是为了刷48的公演直播，本来一直在b站上看是没有问题的。但看这个月的n队N.E.W公演的那天，b站不知为何没有直播源了…… 也来不及搞清楚没有源这个事情是不是又是丝芭想搞闭环，总之当时除了模拟器登口袋，好像电脑上刷直播的方法就只剩在live.48.cn上看。 然后live48不出意料地还在用flash，我的火狐进去之后就是一块白板。虽然最后临时用CentBrowser刷了一下公演，但毕竟不是我的主力浏览器，刷完之后就莫名地感觉不爽…… 扒了扒greasefork，这方面脚本还是比较多的。找了一个用了dplayer的脚本dilidili flash to html5 fix开始抄。抄的过程中就感觉：如果只考虑满足最基本的需求，基本上还在使用Flash播放器的视频站都可以采用这个方式通过加载用户脚本做h5播放器的替换。 步骤 在head或者body加载dplayer的类库和hls的类库。 触发window.onload后，清空原播放器div下的子元素，append一个新div进去用于新播放器的使用。 写一个dplayer的构造函数，配好从原页面提取的视频url、视频类型为hls等配置项即可。 最后的结果可见live48 html5 player。","link":"/2019-04-29-replace-the-flash-player-with-an-HTML5-player/"},{"title":"Hyper-V使用记录","text":"更新：好消息是蓝叠出了兼容Hyper-V的版本，坏消息是这个版本在我的电脑上没用起来。 起因终于对自己一直使用的旧笔记本到了忍无可忍的地步，于是今年3月份在做了各种调研后购入了新机器（Lenove S740, i5 16G版本）。装机过程中我为了偷懒，打算直接用Win10自带的Hyper-V。自己打的如意算盘是可以省得装其他虚拟机软件，也能试一试好不好用。 首先，因为需要一个Win环境的虚拟机去跑一些国产流氓软件（比如长年在后台挂一个QQProtect进程的QQ），所以我考虑新建一个LTSC版本的Win10虚拟机。 这里有一点需要注意的是：Hyper-V给了第一代和第二代两种机器的选择。如果想传文件到第一代机器的虚拟机里，一种方法是通过设置局域网的共享文件夹，另一种好像是通过给虚拟机在硬盘上分一片虚拟硬盘的分区，两种方法都需要进行一些相对繁琐的操作和设置。所以除非需要用一些旧式驱动，一般用第二代机器就可以，因为二代机器支持增强对话，拷贝文件会比较方便且节省时间。 第一个坑一般情况下我们装系统到新建的虚拟机，都是通过虚拟的DVD光驱加载从网上下载得到的镜像文件（ISO、DMG等）进行安装。只要在建虚拟机时勾选上使用镜像安装的选项并选好镜像，Hyper-V就会自动把DVD设备的启动顺序放在第一位（其他虚拟机软件VMWare/VirtualBox一般也是这样）。但是在实际安装最新版本的Win10 LTSC时，Hyper-V不是直接进入安装界面，而是显示提示内容如下的页面： 1scsi dvd the boot loader failed 这说明通过DVD启动失败，没法进入镜像的安装界面。但本来这个DVD光驱就是一个虚拟设备，正常来说是不会有问题的。 google了半天才知道这里需要在虚拟机开机的时候用最快的速度按enter键才能进入系统安装界面（你也可以在开机时多按几次enter）。VMWare这一步是直接就进去了…… 第二个坑除了需要一个隔离环境运行一些流氓软件，我还有一个需求就是用安卓模拟器看青你或者看口袋48直播。因为现在爱奇艺网站必须注册才能看它提供的所谓的“720P”的视频源，非常恶心，为了看这个“720P”只能采用通过模拟器到APP里去看。如果打开了Hyper-V功能，诸如雷电、蓝叠、mumu这类模拟器会无法使用。因为现在市面几乎所有安卓模拟器本质上都是VitrualBox架构的虚拟机，而VitrualBox会和Hyper-V冲突。这些软件一般也会被在自己的使用说明里提到要在Win下关闭Hyper-V才能正常使用。 那打开Hyper-V功能后就没法在机器上开一个安卓模拟器了吗？也是有替代方案的。要想在Hyper-V下同时使用安卓模拟器可以参考“使用 Windows Hypervisor Platform 配置虚拟机加速”。这个方案是通过安装Android Studio(国内需要改hosts），使用IDE自带的模拟器去模拟。实测下来Android Studio的这个开发用模拟器是可以在打开Hyper-V的同时运行的，显示效果和流畅度也不错，但很非常吃配置。S740运行过程中CPU占用率一直是100%，这意味着不到一分钟机器就要开始产生大量发热和噪声。可能更高配置的机器可以使用这个兼容方案，但在我这里这个方案宣告失败。 第三个坑（严格说不是Hyper-V的锅）另一种方案是Hyper-V上装Android-x86的虚拟机。这一方案看上去很美好，但会碰到一些Android编译与开发环境的问题，难到了没有安卓经验的我。在安装镜像过程中，android-x86.org上的镜像基本上都试了个遍，有些镜像会出现键盘失效的情况，有些镜像能够正常安装，但安装完手机QQ或者微信并打开的时候，这些应用就一直弹停止提示，无法正常运行。google了下可能是由于大多数版本的Android-x86镜像基本不自带houdini的问题，导致微信、qq、口袋这些应用没法正常使用。 实在有点懒得继续再折腾。后来还试了试Win下的docker desktop，很流畅，但感觉用的人还是偏少，如果只是用来学习，应该还是基于Linux环境的讨论会比较多。 小结说了这么多，我最后把Hyper-V关了，去装了一个VMWare。","link":"/2020-03-31-hyper-v-sucks/"},{"title":"我搭静态博客","text":"动态博客其实一直以来都很吸引我。事实上不久之前，我还在自己的VPS上搭建了最近比较火的halo。域名、证书签发、反代的配置等等都做好了。但经过一系列的折腾，最后还是回来重新使用github page。 做出这个决定有一个重要的理由——动态博客真的贵：好的域名需要钱，线路流畅的VPS也需要钱。廉价VPS服务商的线路一言难尽，我的目的也仅止于记录自己的一些想法和兴趣，不会有更大的野心。因此权衡下来我更倾向于选择一个具有性价比的方案。 话虽如此，并不代表静态博客就完美无缺。相反，一些在动态博客中根本不能称之为问题的问题，在静态博客上就得通过各种“奇技淫巧”来解决。 因此本文基于hexo聊一聊在搭建过程中需要注意的点，同类型的生成器如pelican在使用中基本上围绕的也都是这些问题。 自动化部署现在流行的做法通过Travis CI自动部署github page，基本上都遵循如下步骤： 新建一个username.github.io仓库，在github的Settings - Developer settings - Personal access tokens页面内为Travis CI新建一个github page专用，并赋予repo权限的access token； 使用github账号登陆Travis CI以完成账号关联，将access token作为GH_TOKEN加入到从github同步过去的仓库配置中，并在Travis CI中启用该仓库。 在本地安装npm、hexo。初始化hexo项目后，为本地项目添加.travis.yml，并完成_config.yml、.gitignore等相关配置； 为username.github.io新建一个source分支，将本地项目推送到这个source分支下。最终目的是让Travis CI根据source分支下.travis.yml中的设置的步骤生成静态文件，并把静态文件推送到username.github.io的master分支下。 这部分的教程其实相当多了，如1。在实际搭建时，可以根据自己的情况进行调整，并不需要照搬教程。 主题开发如果你使用了比较成熟的主题，但又希望做一些个性化的定制，比较好的一种方式是把这个主题fork到自己的github账号下。并在本地环境中拉取fork的主题。这样做之后，本地的开发环境将会有两个仓库： username.github.io的source分支 hexo-theme-themename的master分支 由于主题是一个独立分支，因此在自动部署时，一般会把source下的themes文件夹加入到这个分支的.gitignore里去，避免发生一些可能的修改冲突。 使用时，则通过在.travis.yml添加git clone命令引入主题并渲染，例如： 1234567before_script: - npm install -g hexo-cli - mkdir themes - git clone https://github.com/username/hexo-theme-themename.git themes/themenamescript: - hexo generate 评论服务选型对动态博客来说几乎属于标配的评论功能，在静态博客上就得通过各种奇奇怪怪的方案去实现，并且往往还并不完美。我目前使用的主题minos支持的几种评论服务，就各自存在一些缺点： disqus国内网络环境下的访问实在是太慢了，非常影响浏览体验。 一种方式是把disqus隐藏在一个按钮中，相当于用户只有在点击该评论按钮后才会加载disqus，属于一个治标不治本的方案。 如果坚持使用disqus，可以考虑参考2，但我个人感觉还是会有拖慢。 gitment/gitalk单独为这类评论服务建一个存放issue仓库倒还不是最麻烦的地方，最麻烦的是每篇博文好像都得手动加issue，虽然github也有网友写了脚本完成这一工作，但易用性还是大大降低了。 另外gitment已经停止更新，一些常见问题如object XMLHttpRequestProgressEvent、hexo上的开启失败等只能通过网友提供的各种方案加以解决，这一点也十分劝退我。 isso使用体验最好的一个，但并没有选用他。这实际上涉及的是一个理念问题：isso需要自行搭建，也就是说又得放在VPS上，那为什么不直接选用一个自带评论的动态博客方案呢，和我搭静态博客的出发点相矛盾。当然，对于不介意这点的朋友，这个服务还是推荐的。 valine目前这个博客上部署的方案，没有上面一些比较恶心的问题。但leancloud这个服务能坚持多久是比较让我担心的地方…… 综上所述，可以看到静态博客的评论实在是一大痛点。虽然有各种各样的解决方案，但始终只能算马马虎虎能用，难以达到动态博客的使用体验。 搜索引擎收录及SEO优化目前google的网址前缀收录的推荐方式是通过校验html来完成，步骤可参考5，SEO优化方面的文章也很多，如6，这里就不再赘述了。 小结完成这些内容后，你的静态博客相当于拥有了基本的功能。后续包括全站多语言支持、图片懒加载等等，都是可以持续优化的方面。 当然，对于一个博客来说，最重要的永远是内容。希望大家不要被各种花俏的技巧蒙蔽了双眼，为了搭博客而搭博客。而是通过搭博客培养兴趣和动手能力，在兴趣驱动下，继续分享自己的思考与创意😁","link":"/2020-05-27-the-way-I-build-a-static-blog/"},{"title":"acme.sh的Verify error:Invalid response from报错","text":"之前在hostdare购入过一台VPS，速度一般，所以拿来做备胎，乱七八糟部了一些服务在上面，考虑到最低限度的安全，用acme给每个服务都手动生成了一遍证书，还挺麻烦的（当时因为一些原因，通配符证书没能用起来……）。 其中最常用的一个自用服务是freshrss，今天访问时突然发现证书过期了，按说acme是可以自动续期的。查了一下acme.sh.log，报了一条这个错误： 1[Mon Aug 24 00:09:56 CST 2020] yousite.xyz:Verify error:Invalid response from https://yousite.xyz/.well-known/acme-challenge/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [*.*.*.*]: 404 说明acme是有在自动去更新证书的，但是到verify这一步时会通不过。查了一下，发现项目里面有一条issue：Verify error:Invalid response #132里有解答： 123456789101112131415161718192021222324252627282930同样遇到这个问题，如果是nginx的话，一般是因为服务器拒绝访问，解决方法2个，都是为了获取访问权限：1.在include *.conf; 下方加入部分代码：server {listen 80;server_name yoursite.com www.yoursite.com;include *.conf; // 加入以下代码； location ^~ /.well-known/acme-challenge/ { default_type \"text/plain\"; root /home/wwwroot/yoursite; } location = /.well-known/acme-challenge/ { try_files $uri =404; } 2.在 yoursite.conf 中，把拒绝访问代码注释掉，如下： # location ~ /\\. # { # deny all; # } 我的nginx把各服务的配置单独放在了新建的\\etc\\nginx\\conf\\conf.d\\xxx.conf，所以这里location部分要放到xxx.conf下，后续要做的就是重新加载nginx的配置： 12cd /etc/nginx/sbin./nginx -s reload 为了验证配置是否生效，这里更新了一下acme之后做了一次证书手动更新。 123cd ~/.acme.sh/acme.sh --upgradeacme.sh --renew -d domain.com 这次签发成功了，于是又水了一贴（部分信息做了脱敏处理）……","link":"/2020-08-24-acme-verify-error/"},{"title":"聊聊Yoga S740","text":"后续：相当离谱，联想售后工程师在联想内部知识库找不到的触摸板驱动，我在联想美国官网找到了，虽然当时他们非说是免驱版（包括我自己查了一些联想国内官网的说明也说触摸板是免驱，但实际上这个美国官网的触摸板驱动装完后我的触摸板就好了……） 在没有考虑换机之前，我手上服役的机器还是一台13年购买的Dell Vostro系列。这台机器的硬盘、风扇甚至于键盘C面和D壳都已经被我换了个遍，可能就还剩屏幕没有动过。以为修修补补还可以坚持一段时间，但在数不清是第几次漏电之后，我终于还是受不了了。 决定购机之后，我开始分析自己的需求，大体有以下几点： 能做中度的视频剪辑和渲染 可以玩得动文明6或者欧陆风云4 内存16G，便于开虚拟机；硬盘512G起步 屏幕大小在14寸以内，厚度小于2cm 可以180度开合 接口不能太简陋，得基本够用 较长的续航 不要太贵（笑 …… 1中度的视频剪辑和游戏都对CPU有一定要求，不能太菜了，不然每次还得开远程连家里的电脑做剪辑，太麻烦。内存16G是为了能多开几个虚拟机。14寸以内也基本限定只能在轻薄本里挑。180度开合算是我个人一个喜好吧，我觉得这样摊开之后插显示器比较方便。 当时只是在脑海里粗略地列了一下，但基本是冲着这个方向去选机的。其实现在想想十分后悔，应该直接换Macbook Pro，本来Win系列本也已经用到有点吐了，但最后还是没有走出这一步，果然还是穷。 在各种奇奇怪怪的要求的引导下走进我视野的就是这台S740了。各种测评都有提到它的各种优点： 3733Mhz的板载LPDDR4X内存，算是当前市面上笔记本所使用的最高频内存了 一块DC调光、72%NTSC、400nits的屏幕，素质相当好，并且这块屏是LTPS的低功耗屏，搭配62Wh的大容量电池，续航表现很不错 使用10代CPU，性能释放表现好 满血雷电3接口，WiFi6无线网卡 那么实际上这台机器有没有各种测评说的这么好呢。从我自己的实际使用感受来看，这些优点是基本属实的。但这不意味着这台机器没有缺点了，事实上这台机器的缺点还不少： 首先，很不能让人忍受一点的就是这台机器的C面非常的尖锐，握持起来很不舒服。其次，机器的键盘手感并没有一些测评里吹的那么好，虽然不算特别差，但击键的时候有时会出现卡键的情况。另外这台机器的接口布局也不很合理，右边单独放了一个孤零零的USB，左边把电源口，雷电3接口，USB口和耳机口一股脑儿放在一起，使用时很拥挤。只配一个Type-C接口也显得很小气，多配一个把电源口砍掉不好么。 没有指纹解锁也是让人很费解的，我个人并不喜欢面部解锁，但因为这个原因也不得不用。 在7月份左右的时候，掉盘了。虽然这台机器的SSD表现其实还是挺不错的，但这么快就掉盘实在是出乎我的意料。没办法，只能联系联想上门维修。其实就是想着找它们免费换块盘。 等来了工程师上门，换完硬盘重装了系统，发现触摸板又不工作了……一般这种情况我们都会想着去找驱动装上，结果联想自己的官网上找不到相关的驱动。这位联想工程师联系了自己的同事，说这款机器触摸板是免驱的，装上系统就能使用。结果他自己带来的系统又怎么装都不行……最后这位小哥问我之前的一次重装时用的是什么镜像，说要不你自己重装试试。弄得我也无语了…… 后来的解决方案是把我的机器拿回了维修站，重装了一次出厂系统。触摸板的问题总算解决了。但给我的感受就是联想内部管理挺混乱，虽然看起来他们自己有做移动端的知识库系统，但对自己新推的新机型的支持明显滞后。包括一开始这位工程师想用PE进去机器看一看硬盘情况，结果发现自己的PE在这台机器上无法使用，换了好几套才进去，也给人感觉对新机型不熟悉。这次售后算是解决了问题，但体验还是很糟糕的。包括这台机器本身也给人一种不安定感。 现在我也还在坚持用这台机器，因为这些缺点的存在，抵消了我对它优点的好感。用起来总是觉得不怎么舒服。并且因为触摸板的缘故，我现在只能继续用工作站重装的Win10家庭版，实在是痛苦。现在看来，最大的感悟可能就是：下次换机我不会再想着省钱了。","link":"/2020-09-04-lenovo-yoga-s740-review/"},{"title":"抖音自动点赞","text":"因为一些主播会把点赞达到多少万作为一项指标，自己又懒得点，所以想把这个工作给自动化。 现在可以搜到的实现基本都是基于adb的，这是一个简陋的整合了相关资料的win下的教学。 其原理为：直接使用adb的点击事件速度会不够快，可以通过记录用户操作再输出的方式模拟在dy主播界面快速点击的行为。 下载一个安卓模拟器（本文使用夜神模拟器）并安装，完成安装后在模拟器内安装dy，登录已经关注主播的抖音账号，并进入直播页面 通过命令行进入nox_adb.exe所在目录（命令为默认安装位置）：cd \"C:\\Program Files (x86)\\Nox\\bin\\\" 进入夜神模拟器的adb shell：nox_adb shell 进入shell后，准备记录输入操作到一个新建的recordtap文件内：dd if=/dev/input/event5 of=/sdcard/recordtap，具体是event5或其他（如event1等）可在shell中通过getevent命令查询 回到模拟器的直播页面，在屏幕上重复快速点击 退出adb shell（如快捷键无效，可关掉命令行窗口后重开） 重新进入adb shell，直接写成一个死循环，运行命令1： i=1; while [ i -gt 0 ]; do dd if=/sdcard/recordtap of=/dev/input/event5;sleep 5; done 多开时直接执行nox_adb shell会报error: more than one device and emulator2，这时需要先nox_adb devices查看当前有设备与模拟器： C:\\Program Files (x86)\\Nox\\bin&gt;nox_adb devices List of devices attached 127.0.0.1:62025 device 127.0.0.1:62001 device 在执行adb命令时，为命令指定设备的序列号nox_adb -s 127.0.0.1:62025 shell 说明： 使用夜神安卓模拟器3的ADB指令时，需要将adb改为nox_adb，如nox_adb devices对应adb devices，nox_adb shell对应adb shell。 参考：","link":"/2020-11-16-douyin-auto-thumbup/"},{"title":"restic使用onedrive的贴士","text":"太长不看版：推荐使用restic提供的offical binary自己编译。 问题我们在通过docker使用Bitwarden之类的应用时，一般会把它的数据库等等文件挂在到本地的一个位置，这时候可以通过restic来备份VPS上的这部分数据到网盘，既有加密又有快照恢复，使用resitc就是看中了这些功能。 但在使用过程中也还是不出意外地出现了各种问题，这里记录一个我自己最开始碰到的：我希望通过restic将挂载出来数据备份到我自己的onedrive里。现在restic的onedrive备份需要通过rclone。rclone连接onedrive是没有问题的,但在执行restic -r rclone:onedrive:Backup init（onedrive、Backup分别为我自定义的remote和folder名）时会报Fatal: create repository at rclone:onedrive:Backup failed: invalid backend错误。 如果这是一个invalid的backend，那么说明我们rclone的连接有问题，rclone lsd: onedrive应该是不能正常显示目录结构的，但实际经过测试没有发生这个情况。 原因最后爬restic的论坛发现了同样问题的一个讨论贴：restic-with-rclone。solution的这位老兄为了解答还去搜了源码，发现如果确实是restic -r rclone:onedrive:Backup init这个命令的形式，执行时会无法通过打印”invalid backend”的这条报错信息的判断条件，所以当前版本执行这一命令不会出现问题，有可能是restic版本过时。 两相对照后，也是被自己蠢笑了，当时无脑apt-get install resitc，没有考虑到现在VPS上的系统版本是UBuntu的LTS版本。导致我在VPS安装的restic的这个版本是0.8.3，而根据讨论贴里的信息，restic在0.9.0版本里才加入rclone支持。 解决因此需要重装一下restic，我的步骤是先根据go主页的Download and install安装好go环境，之后再通过wget https://github.com/restic/restic/releases/download/v0.12.0/restic-0.12.0.tar.gz下载官方的包，解压后再执行make去编译。编译完成后生成的可执行的restic文件就可以正常使用了。 如果需要配置定时任务，可以用crontab或者systemd。crontab的话可以先把RESTIC_PASSWORD=\"here is your password\"加到~/.bashrc或者~/etc/profile里，之后在crontab -e添加任务配置： 10 4 * * * . ~/.bashrc; /home/user/restic-0.12.0/restic -r rclone:onedrivedb:Backup backup /home/user/data; /home/user/restic-0.12.0/restic forget -q --prune --keep-hourly 24 --keep-daily 7","link":"/2021-03-30-restic-onedrive-tip/"},{"title":"给自己VPS的新服务新增证书","text":"2023年2月28日更新： 没记错的话若干年前acme.sh使用通配符证书还没法自动续签，所以当时是一条一条添加的，现在应该不存在这个问题了。 证书申请参考使用 acme.sh 配置自动续签 SSL 证书，nginx配置参考配置 Nginx 和 frps 共存 80/443 端口及泛域名支持教程即可(不过第二篇有关“frpc.ini 中域名参数需使用 subdomain = xx 仅填写二级域名主机头即可，不要填写完整域名”的内容，经测试还是得写完整域名。)。 12345678910111213141516171819202122232425262728293031323334353637server { listen 80; server_name *.yourdomain.com; return 301 https://$host$request_uri;}server { listen 443 ssl http2; server_name *.yourdomain.com; ssl_certificate /usr/local/nginx/conf/ssl/yourdomain.com.crt; ssl_certificate_key /usr/local/nginx/conf/ssl/yourdomain.com.key; client_max_body_size 50m; client_body_buffer_size 256k; client_header_timeout 3m; client_body_timeout 3m; send_timeout 3m; proxy_connect_timeout 300s; proxy_read_timeout 300s; proxy_send_timeout 300s; proxy_buffer_size 64k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; proxy_ignore_client_abort on; location / { proxy_pass http://127.0.0.1:1234; proxy_redirect off; proxy_set_header Host $host:80; proxy_ssl_server_name on; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; }} 2022年1月7日更新： 关于下文中“che.xxx.xyz这个域名配置成我在/home/wwwroot/下布好的一个静态网页”这一描述，现在再读，感觉还是直接给出一个nginx的配置范例会比较清晰一些 12345678910111213141516#运行acme.sh --issue -d che.xxx.xyz --webroot /home/wwwroot/XXX 命令前，注释掉80端口转发的配置# server {# listen 80;# server_name che.xxx.xyz;# return 301 https://$host$request_uri;# }#取消注释用于签发证书的配置 server { listen 80; server_name che.xxx.xyz; root /home/wwwroot/XXX; location ^~ /.well-known/acme-challenge/ { default_type \"text/plain\"; } } 保存后运行./nginx -s reload令其生效，运行下方的acme.sh命令以签发证书 123acme.sh --issue -d che.xxx.xyz --webroot /home/wwwroot/XXXacme.sh --installcert -d che.xxx.xyz --keypath /data/che.xxx.xyz.key --fullchainpath /data/che.xxx.xyz.fc.cer --reloadcmd \"service nginx reload\" 完成签发后，在nginx配置新增配置，并注释掉之前用于签发证书的内容 1234567891011121314151617181920212223242526272829303132333435363738394041#新增https配置 server { listen 443 ssl http2; server_name che.xxx.xyz; ssl_certificate /data/che.xxx.xyz.fc.cer; ssl_certificate_key /data/che.xxx.xyz.key; location / { proxy_pass http://127.0.0.1:1234; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location ^~ /.well-known/acme-challenge/ { default_type \"text/plain\"; root /home/wwwroot/XXX; } location = /.well-known/acme-challenge/ { try_files $uri =404; } } #取消注释80端口的转发，令其生效 server { listen 80; server_name che.xxx.xyz; return 301 https://$host$request_uri; } #注释掉用于签发证书的配置，以便再次使用# server {# listen 80;# server_name che.xxx.xyz;# root /home/wwwroot/XXX;# location ^~ /.well-known/acme-challenge/ {# default_type \"text/plain\";# }# } 再次运行./nginx -s reload，令配置生效。 先去购买域名网站的配置页面那里给这次想使用的子域名che.xxx.xyz更新一条DNS记录，DNS更新大概15到20分钟左右时间。 这次加的是chevereto这个图床应用，直接用官网的docker-compose.yml改一下分配的端口号，之后通过docker-compose up -d进行安装。 这时候还只能通过ip加端口形式访问，所以需要在nginx中加配置，把che.xxx.xyz这个域名配置成我在/home/wwwroot/下布好的一个静态网页。然后重启nginx服务让配置生效，好像用restart或者reload都行。 之后要用到acme.sh了： 123acme.sh --issue -d che.xxx.xyz --webroot /home/wwwroot/XXXacme.sh --installcert -d che.xxx.xyz --keypath /data/che.xxx.xyz.key --fullchainpath /data/che.xxx.xyz.fc.cer --reloadcmd \"service nginx reload\" 这两个命令分别做了生成证书以及把证书安装到指定位置，这次做的时候我把第二步给忘了，是手动拷贝过去改名字的，所以拷错了文件，加载配置时报了PEM_read_bio_X509_AUX这个错。所以还是用脚本吧。 证书部分完成后就是重新修改nginx的配置，这次得按照正式使用的场景进行修改，改完后还是同样需要让新配置生效。 nginx生效后，就可以通过https访问了。 后记：其实图床这个事情也和我搭静态博客的想法或者说理念有点冲突，实际是有人拿github直接做图床的，想了想还是不大好意思这么做。","link":"/2022-01-07-add-https-for-new-web-service-on-vps/"},{"title":"一次失败的刷剧经历","text":"虽然很久不追剧了，但直到1202年的这个冬天我发现看个剧还是一件很难的事情。 背景之前gf想看《机智医生生活》第一季，因为这部剧没有引进，我自己的VPS当时还没做解锁导致Netfilx只能看自制剧，所以只能四处帮她找下载。找的过程中有一个感受，虽然追看韩剧的群体很庞大，但在国内看韩剧的体验实在不能算好，针对这部剧而言，我个人觉得最方便省心地观看方式还是通过Netflix，无论是画质还是翻译质量都有相当保障。 但是国内看Netflix有多难大家都知道了，不仅需要购买DRM认证的专用设备（电视或电视盒），还需要解决机场或VPS搭建以及流媒体解锁等问题，对于只是想单纯刷剧，尤其是很多追剧党都是不太具备相关计算机知识的其他专业，基本上无人能在这一套折腾下坚持到成功收看。所以大部分人还是只能指望字幕组大善人通过发布资源的方式看剧。 字幕组发布的资源存在的一个最大问题就是画质。本身这种熟肉基本上都是内嵌字幕，注定要经过一轮压制，加上源本身可能不够高清，或者是考虑到小体积易于传播，所以画质会被压缩地更厉害。所以我一开始的思路想找一找外挂字幕，源则通过一些PT站的发布资源解决。果然PT上的资源画质相当不错，但另一个问题来了，外挂字幕有是有，但是和我下载的这个源匹配不上，这可如何是好。 问题我研究了一下手头上搜到的几个外挂字幕，一个是某国内字幕组为这部剧制作的ass字幕，这个字幕如果在我的plex上播放，需要经过一轮转换。由于plex的先天不足，转换后播放的速度会变得极慢，所以如果要用这个字幕，需要先进行一步ass转srt的工作。但由于这个字幕使用了特殊字体和一些特效，导致转换后的srt效果很差，再加上这个字幕时间轴本来也和我手头这个源不大对得上，所以还是pass掉了这个字幕。 第二个字幕是一个国内资源分享群发布的，惊喜地发现时间轴似乎是能对得上，但是前四集没有。完美主义发作下这个字幕也先搁置起来了。 希望第三个字幕是在国外网站上发布的一个Netflix源的字幕，我发现这个字幕似乎与第二个字幕一模一样，内容上唯一不同的是Netflix的字幕会在结尾标上译者的名字，第二个字幕可能是不想别人发现自己是直接拿来的，所以把这个信息给抹了（笑）。开始感觉离成功有点近了。 接下来要做的就是想办法怎么把时间轴对准确，但实在不想花太多时间用软件一个一个去校准，我大致对比了一下第三个字幕和第二个字幕，感觉第二个字幕有点像是把第三个字幕整体延迟了11秒左右，于是我的问题变成了有没有这样一个工具能够做到对srt的时间轴做整体的修改。结果还真发现了这样一个简陋的在线工具：subtitle-sync-shifter 失望当我做完字幕，以为这一切都尘埃落定的时候，现实又教我做人了。我坐在沙发度过了愉快的前20分钟，画质清晰，体验与Netflix相差无几，然而在二十分钟后，字幕开始对不上画面，每一句台词都开始先于角色出现在银幕里。我意识到，之前那个国内资源分享群那个字幕应该还是有其独到之处的，至少它花了时间帮你做了时间轴的校准…… 痛苦，好像我要想好好看一下这部剧只能靠字幕组的内嵌字幕版本了。然而筛选各种版本的熟肉也让人纠结，有些字幕组喜欢夹带各种奇怪的片头，或者把字幕做得很大占据过多空间，虽然如此，我没有责怪他们的意思，只是觉得这么多人在为了看电视剧这件简单的事情付出了很多努力，但这件事本身不应该变得这么困难。 结局最后我还是回到了一开始的方案，通过流媒体解锁让我的Netflix节点能够观看自制剧以外的剧集，尽管gf在之前那次不成功的观看过后已经打消了继续看下去的念头，但我收获了一点欣慰，至少以后她如果再想看个什么，我可以有个相对稳定可靠的选项来满足她的需求。","link":"/2022-02-10-a-fast-and-easy-way-to-create-subtitles-for-some-TV-series/"},{"title":"docker版qbittorrent修改webUI乱码问题","text":"我在群晖通过docker安装了4.1.9版本的qbittorrent，当初选定这一版本是根据天雪的客户端支持列表来的，这个版本的UI提供的功能很简陋，所以需要使用第三方webUI替代。 问题但在修改webUI时，一点击保存就会跳转到一个乱码页面，内容如下： 涓嶅彲鎺ュ彈鐨勬枃浠剁被鍨嬶紝鍙厑璁镐娇鐢ㄥ父瑙勬枃浠躲€� 恢复虽然有很多教程(本质上都来源于reddit的这个讨论)指出，此时如果想恢复qb假死的状态，需要在url后加上如下内容以调用api： /api/v2/app/setPreferences?json=%7B%22alternative_webui_enabled%22:false%7D 但实测是无效的，因为显示该乱码的原因是之前我们把qb调成了中文界面，只有在英文界面正常显示如下信息时，该方法才能生效： \"Unacceptable file type, only regular file is allowed\" 这时候只能通过在docker管理界面新建一个/bin/sh的终端，进入docker内部去修改qb的配置文件（把webui启用的选项设置成false)，重启容器后才能重新正常访问qb的web页面。 解决如果想要正常安装第三方webUI并使用，一个重点是写对配置路径。 可以参考以下做法： 若待挂载的各目录都安排在nas的绝对路径/volume1/docker/qbittorrent/下，这里/docker最好是一个有读写权限的共享文件夹，这样可以排除产生权限问题的可能。 新建容器时，除惯例挂载的config、data、downloads等文件夹外，新增一个挂载到/docker/qbittorrent/webui的/webui文件夹，用于存放UI文件并确保其可以被读取。 在qb的配置菜单的备用webUI选项中填入的是相对路径，如：/docker/qbittorrent/webui/qb-webui-linux-sc-sarasa/public/ 这时再点击保存后，不再跳转乱码页面，第三方UI已可以正常显示。","link":"/2022-11-14-how-to-modify-qbittorrent-webui-on-synology-nas/"},{"title":"使用WARP脚本为VPS添加IPv4/IPv6网络","text":"2022-11-14 09:07更新： 之前安装的WARP失效了，重装VPS系统后再次运行一把梭脚本，无法正常使用（应该是因为无法获取IP），因此使用了warp-go的相关脚本配置IPv4/IPv6网络: wget -N https://raw.githubusercontent.com/fscarmen/warp/main/warp-go.sh &amp;&amp; bash warp-go.sh d 2022-01-27 15:55更新： 大部分的VPS不是原生IP，在Netfilx上无法观看breaking bad这类非自制剧。 并且随着使用时间的增长，很容易被Google认定为机器人，从此每次使用Google时都会跳出烦人的验证码。因此使用WARP是很有必要的。 因为现在有方便的一把梭脚本，正常来讲新的空白机器想要解锁可以直接执行： bash &lt;(curl -fsSL git.io/warp.sh) d 问题然而我目前使用的Hostdare服务器(年付$34.49的Premium China Optimized KVM VPS，中途换过一次IP)实际跑一把梭脚本时会在运行到starting wireguard时卡住，由于我懒得排查具体是什么原因（操作系统版本？还是服务器的一些未知原因？），且服务器上也部署了很多docker容器，因此也无法轻易地重装系统。所以决定干脆试试另一个解锁教程的方案：WARP socks5 client分流。 另外，我在按照该解锁方案实操时，使用另一一键WARP脚本安装warp socks5 client出现了无法安装的情况。 为了解决上述两个问题，我简单调整了该解锁方案的执行步骤：将warp socks5 client安装的步骤调整为用一把梭脚本安装，之后的步骤实际上和教程完全一样了，但还是完整地记录一下供Hostdare用户参考： 过程安装WARP socks5 client执行： bash &lt;(curl -fsSL git.io/warp.sh) menu 进入菜单后，选择相关选项安装warp linux client。 刷可使用IP完成上一步的安装后，执行： wget -N https://cdn.jsdelivr.net/gh/fscarmen/warp/menu.sh &amp;&amp; bash menu.sh 选择选项5：“更换支持Netflix的IP”，刷到可使用的IP。 修改配置文件实现分流执行vim /etc/v2ray/config.json修改v2ray配置文件的outbounds和routing部分为： 123456789101112131415161718192021222324252627282930\"outbounds\": [ { \"protocol\": \"freedom\" }, { \"tag\": \"media-unlock\", \"protocol\": \"socks\", \"settings\": { \"servers\": [ { \"address\": \"127.0.0.1\", \"port\": 40000, \"users\": [] } ] } }], \"routing\": { \"domainStrategy\": \"AsIs\", \"rules\": [ { \"type\": \"field\", \"domain\": [ \"geosite:netflix\" ], \"outboundTag\": \"media-unlock\" } ]} 修改后执行： sudo systemctl restart v2ray 重启v2ray使配置生效。 补充这种方法解锁的机器在执行流媒体检测时，结果仍然会显示非原生IP，但实际观看时不受影响。","link":"/2022-11-14-install-warp-on-hostdare-vps/"},{"title":"踩坑GSM alphabet","text":"比起计算机网络里不知考过多少遍的IMAP，GSM alphabet这个概念恐怕很多人是第一次听说。一个是邮箱协议，一个是通讯标准，是一个什么样的坑能把看起来没联系的两者联系到一起去呢？ 问题事先声明，如果你是gmail用户，那基本不可能遇到以下问题。只有常用邮箱是QQ邮箱，手机又恰好刷了miui.eu（不确定其他miui版本是否有相同设置）的大冤种，才有几率踩这个坑。 首先，使用第三方客户端登录qq邮箱或者163邮箱，都需要手动开启邮箱的IMAP。而开启IMAP，需要发一条指定内容的短信到指定号码进行验证，以获得腾讯或网易生成的授权码。 我的163邮箱在这个环节可以正常发送、验证，但qq邮箱通过密保手机发送短信时就会弹出如下提示： 核对了多遍，也没有发现内容哪里有误 疑惑通过qq邮箱的反馈建议提交了一个工单上去，qq对这个问题的答复是： 你好，出现这种情况一般有可能：用户手机终端本身没有把这个短信成功发送出来，请检查自己的手机状态是否正常，建议： 1、致电运营商客服电话，询问是否被禁止了端口短信功能/增值业务 网关（也叫做SP开关）； 2、发送短信到备用接收号码重试； 3、发送短信时去掉+86重试发送； 4、确认是否有发送扣费记录，若扣费成功，请提供【扣费记录截图】、【发送短信手机号（密保手机号）】、【发送短信时间】给我们，若没有扣费成功，请联系运营商，感谢配合！ 第一点，肯定不可能，因为我的手机刚刚还在163邮箱那边成功打开了，应该不存在这个问题； 第二点，实际测试了一下，也可以正常发送接收； 第三点，看手机的短信页面，是不带86的； 第四点，短信查询余额，确实有扣费。 这时变得有点像在做一道选择题，需要选出错误的选项，但所有选项看起来都是对的。 解决这时候只能回过头来看选项了，感觉最大的可能还是出在+86这里。 于是去电信查询详单，号码确实有问题： 但手机上是没有显示+86的，那一定是有某个设置自行进行了添加。在仔细观察后我注意到了这个配置： 关掉这一选项并重新发送短信，验证正常通过。我想原因可能是因为在miui上使用GSM-alphabet这个选项的话，会先把号码拼接上+86再做短信的发送，所以虽然发短信时手输的号码不带+86，但查询的结果显示是加上+86的。 其他在解决的过程中，我也突然想到有没可能通过安装Foxmail客户端来开启IMAP，得到了一个很奇怪的结果：安装完成后进入默认的登录选项，会要求手动配置IMAP，这时输入框是无法填写的灰色：这很好理解，因为邮箱设置里IMAP也是没有开启的状态，不给登录也很正常。 但是如果用qq扫码登录，无需配置便可以正常通过Foxmail客户端使用邮箱。此时通过网页端查看，邮箱的IMAP设置依然是关闭的（但不知什么原因exchange设置好像给打开了）。 虽然我解决了这个问题，但有种浪费生命的感觉：最基础设置还需要繁琐手段开启。我想我会考虑尽量解绑使用qq邮箱的账号，转为使用gmail。虽然国内的网络环境很可能继续恶劣下去，但这样的服务实在不值得继续使用。","link":"/2022-11-22-imap-and-gsm-alphabet/"},{"title":"380.70_0-X7.9版本梅林固件路由器重置指南","text":"家里的R7000已经服役了6年，当时费很大劲刷好的梅林，固件号也伴随koolshare的各种骚操作停滞在了380.70_0-X7.9版本。长期的工作使得路由器经常因为莫名其妙的原因而罢工，重置也因此成了家常便饭。 一些常见的故障及排障如果R7000只是2.4g和5g指示灯不再闪烁，也有可能是误触引起的（比如堆放了物件等），这时可以先长按面板右数第二个键数秒。能够正常亮灯也就不用重置。在重置之前，仍然建议读者还是耐心地使用搜索引擎解决问题。重置往往伴随着的配置的丢失，耗时费力。 硬重置方法在确定重置不可避免时，往往此时已经无法进入后台了，最简单的硬重置方法就是在开机状态下使用卡针按住路由器后方的reset按钮30秒左右后松开，为避免变砖可能还需要断电30秒后再插电30秒，但实际操作时不严格遵循该步骤应该也是能够重置成功的。 设置连接名称密码重置后路由器连接名称会变会Netgear，因为后续要使用smart connect，所以在连接后进入的设置向导页面只需要考虑一下管理员名称和密码的设置，wifi连接名称和密码建议只需要使用默认密码（00000000）即可。 向导完成后，连接wifi并访问：http://router.asus.com/Main_Login.asp 登入后可以先进入外部网络选项卡，打开smart connect开关，此时使用的wifi名称在保存应用后将不再区分2.4g和5g，而是根据smart connect rule进行切换，这部分的设置可以参考华硕路由器Smart Connect原理解析与硬核设置指南。 对于此前联系过运营商做过桥接改造的用户来说，还需要在外部网络选项卡将拨号选为PPPOE，并在PPP处填入运营商提供的用户、密码。 解除软件中心限制此时路由器已经可以正常访问网络，但如果想要科学上网，需要先根据路由器提示打开jffs的一个权限选项，再打开路由器的ssh功能，执行命令 1sed -i 's/\\tdetect_package/\\t# detect_package/g' /koolshare/scripts/ks_tar_install.sh 解除软件中心的安装限制。或使用其他方式（如安装fuckkoolshare.tar.gz)。 安装clash如果还在使用ss的用户，可以尝试寻找旧版本ss并安装。目前比较流行的方式是安装merlin clash，它使用能够兼容xray的clash-meta内核，如果此前使用过clash for windows等，只需要将规则配置文件修改为能够通过校验的格式并上传即可。 端口转发PT需要端口转发，可参考华硕Merlin梅林路由Synology群晖不能外网访问的踩坑记录进行配置。 配置导出最后为避免重复劳动，建议做一次配置及jffs的导出并备份在其他可靠位置。","link":"/2023-01-29-how-to-reset-380.70_0-X7.9-merlin-router/"},{"title":"群晖nas搭建calibre-web勘误","text":"关于如何在NAS上搭建calibre-web实现个人书籍管理，目前比较详细的教程可参考“群晖nas搭建个人图书馆”。该教程的原始版本存在笔误并缺失一些关键问题的解决。作者似乎已经对其中的一些错误进行了修正，但考虑到搜索结果中还有存在着一些原版本的内容流传，这里还是不厌其烦的列出以下内容以供读者参考。 GUID的笔误首先，初始化容器时填写的环境变量不是PUID、GUID，而是PUID、PGID。 原PUID及PGID配置引起上传时报“attempt to write a readonly database”此处问题与PUID及PGID的值有关，原文设置为$(id -u)和$(id -g)，观察容器日志： 12groupmod: invalid group ID '$(id -g)'usermod: invalid user ID '$(id -u)' 可知这种写法也会提示非法。 因此个人建议还是老老实实打开群晖的ssh功能，本地连接后运行id命令获取实际的PUID和PGID。填写实际获取到的id后不再出现该报错提示。 缺少必需挂载的文件夹引起上传时报“无法保存到临时目录”在完成PUID和PGID配置后，除/books及/config外，还需要额外挂载/tmp和/upload两个文件夹。否则无法上传书籍。此处原理可参考reddit。","link":"/2023-02-28-running-calibre-web-on-synology/"}],"tags":[{"name":"Powershell","slug":"Powershell","link":"/tags/Powershell/"},{"name":"Userscript","slug":"Userscript","link":"/tags/Userscript/"},{"name":"Virtualization","slug":"Virtualization","link":"/tags/Virtualization/"},{"name":"Hyper-V","slug":"Hyper-V","link":"/tags/Hyper-V/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"VPS","slug":"VPS","link":"/tags/VPS/"},{"name":"Laptop","slug":"Laptop","link":"/tags/Laptop/"},{"name":"android","slug":"android","link":"/tags/android/"},{"name":"TV-Series","slug":"TV-Series","link":"/tags/TV-Series/"},{"name":"subtitle","slug":"subtitle","link":"/tags/subtitle/"},{"name":"qbittorrent","slug":"qbittorrent","link":"/tags/qbittorrent/"},{"name":"nas","slug":"nas","link":"/tags/nas/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"Email","slug":"Email","link":"/tags/Email/"},{"name":"Router","slug":"Router","link":"/tags/Router/"}],"categories":[{"name":"Coding","slug":"Coding","link":"/categories/Coding/"},{"name":"Digital","slug":"Digital","link":"/categories/Digital/"},{"name":"Media","slug":"Media","link":"/categories/Media/"}]}