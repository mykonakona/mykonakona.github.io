<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mykonakona</title>
  
  <subtitle>Just Another Weblog</subtitle>
  <link href="http://mykonakona.github.io/atom.xml" rel="self"/>
  
  <link href="http://mykonakona.github.io/"/>
  <updated>2024-04-15T14:11:15.885Z</updated>
  <id>http://mykonakona.github.io/</id>
  
  <author>
    <name>mykonakona</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>好的博客永久链接
</title>
    <link href="http://mykonakona.github.io/categories/tutorial/elegant-hexo-permalink/"/>
    <id>http://mykonakona.github.io/categories/tutorial/elegant-hexo-permalink/</id>
    <published>2023-09-10T13:20:14.000Z</published>
    <updated>2024-04-15T14:11:15.885Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>什么是好的永久链接？如何在Hexo内实践？</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>除了狭义上的配置、部署、主题美化等等，静态博客搭建还有一个重要的部分：SEO。</p><p>SEO是静态博客的一个痛点：</p><ol><li>当静态博客系统缺乏SEO支持时，有使用需求的用户就需要自行实现这类功能</li><li>流行的静态博客系统大多适配了一些配置选项乃至插件协助用户完成这项工作，但仍相对粗糙</li></ol><p>第二条在Hexo有所体现，以永久链接（permalink）的默认配置为例：</p><p><code>:year/:month/:day/:title/</code></p><p>很明显，这一配置将会生成一系列结构复杂的URL，并且修改博文的时间、标题后，URL也会同步变化——这对于搜索引擎已收纳的页面而言是一场<a href="https://www.wbolt.com/seo-friendly-urls.html">灾难</a>。</p><p>据此，对静态博客进行永久链接配置是很有必要的。常见的URL问题大体包括：</p><ul><li>层级过深、长度过长</li><li>内容可读性差（不明意义的参数和ID、使用下划线、使用汉字等）</li><li>页面的频繁变动使URL失效</li></ul><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>Hexo目前支持的永久链接插件主要有这几类：</p><ul><li>使用计数代替日期、标题等</li><li>直接对日期、标题等进行编码或hash</li><li>使用标题翻译、全拼插件自动转换标题为英文或全拼</li></ul><p>我们将前述总结的URL问题与目前的Hexo永久链接插件功能对照来看：</p><p>计数类、hash类的插件，能够有效缩短URL层级、长度。后续页面的标题、时间等内容的编辑与变动也不再影响URL本身。但这类URL显然不具备提示意义，读者看到的只是随机的字符串，也不利于记忆与查找。</p><p>翻译或全拼转换插件，方便了用户的使用，避免了URL中出现非ASCII字符。问题在于这类插件容易生成较长的URL，且翻译类插件的翻译质量也值得商榷。</p><h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><p>因此，不使用这类插件，直接配置为<code>:title/</code>或许也是一种选择：只要控制好标题的单词数量并通过连字符连接，很容易得到类似</p><p><code>https://www.demo.com/seo-friendly-urls/</code></p><p>符合谷歌<a href="https://developers.google.com/search/docs/crawling-indexing/url-structure?hl=en&amp;visit_id=638300113981062992-3301496743&amp;rd=1">URL结构最佳实践</a>的URL。</p><p>到这里是不是就结束了呢？并没有。</p><p>直接配置为<code>:title/</code>，会导致public文件夹充斥着大量Hexo生成的页面文件。同时，source文件夹内的博文，将很难通过时间定位。这些问题似乎只能通过编写自定义<a href="https://prinsss.github.io/hexo-posts-in-subfolder/">js脚本</a>的方式来调整。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>有没有可以不编程的解决方案呢？我是这样解决的：</p><ul><li>命令行运行：<code>hexo new page categories</code>，生成博客的“分类”（categories）页面</li><li>设置永久链接配置为<code>categories/:category/:origin_url/</code></li><li>设置category_map</li></ul><p>这样做有几个好处：</p><ul><li>通过配置中<code>categories/:category/</code>的部分，组织了public文件夹下的博文页面文件</li><li>单独访问categories/或categories/life/时不会404。<code>:year/:month/:day/:title/</code> 这类永久连接在<code>2023/</code>时是没有页面的。</li><li>source文件夹内的文件标题仍可以保持原样，不需要单独修改成类似<code>seo-friendly-urls.md</code>的形式。</li></ul><p>可参考我的Hexo配置：</p><figure class="highlight yaml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># URL</span></span><br><span class="line"><span class="hljs-comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="hljs-attr">url:</span> <span class="hljs-string">http://mykonakona.github.io</span></span><br><span class="line"><span class="hljs-attr">root:</span> <span class="hljs-string">/</span></span><br><span class="line"><span class="hljs-attr">permalink:</span> <span class="hljs-string">categories/:category/:origin_url/</span></span><br><span class="line"><span class="hljs-attr">permalink_defaults:</span></span><br><span class="line"><span class="hljs-attr">pretty_urls:</span></span><br><span class="line">  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class="line">  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing '.html' from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 其他内容……</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Category &amp; Tag</span></span><br><span class="line"><span class="hljs-attr">default_category:</span> </span><br><span class="line"><span class="hljs-attr">category_map:</span></span><br><span class="line">  <span class="hljs-string">教程:</span> <span class="hljs-string">tutorial</span></span><br><span class="line">  <span class="hljs-string">分享:</span> <span class="hljs-string">experience</span></span><br><span class="line">  <span class="hljs-string">踩坑:</span> <span class="hljs-string">pitfall</span></span><br><span class="line">  <span class="hljs-string">生活:</span> <span class="hljs-string">life</span></span><br><span class="line">  <span class="hljs-string">笔记:</span> <span class="hljs-string">memo</span></span><br><span class="line"><span class="hljs-attr">tag_map:</span></span><br></pre></td></tr></tbody></table></figure><p><code>:origin_url/</code> 来自此前为博客的博文引入的Front Matter项，可参考<a href="https://mykonakona.github.io/categories/experience/my-notebook-workflow/">我的笔记工作流</a>。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>有关URL还有一些其他观点，例如包含<code>.html</code>的URL被定性为<a href="https://gohugo.io/content-management/urls/#ugly-urls">ugly URL</a>。然而包不包含<code>.html</code> 事实上并不影响搜索引擎的收录。因此上述所作的很多SEO努力实际上只是锦上添花的工作。比起为了SEO优化频繁修改URL结构，一个配置用到死或许反而效果更好。不过如果不希望后续再来调整博客URL，那么好好规划还是有必要的。</p></body></html>]]></content>
    
    
    <summary type="html">什么是好的永久链接？如何在Hexo内实践？</summary>
    
    
    
    <category term="教程" scheme="http://mykonakona.github.io/categories/tutorial/"/>
    
    
    <category term="Hexo" scheme="http://mykonakona.github.io/tags/Hexo/"/>
    
    <category term="SEO" scheme="http://mykonakona.github.io/tags/SEO/"/>
    
    <category term="URL" scheme="http://mykonakona.github.io/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>Hexo手动添加PWA
</title>
    <link href="http://mykonakona.github.io/categories/tutorial/add-pwa-manually/"/>
    <id>http://mykonakona.github.io/categories/tutorial/add-pwa-manually/</id>
    <published>2023-09-01T06:12:35.000Z</published>
    <updated>2024-04-15T14:11:15.885Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>不要再装那些Hexo的PWA插件了。</p><span id="more"></span><p>为Hexo博客添加PWA支持，主要分两部分：</p><h2 id="准备manifest"><a href="#准备manifest" class="headerlink" title="准备manifest"></a>准备manifest</h2><h3 id="制作图标"><a href="#制作图标" class="headerlink" title="制作图标"></a>制作图标</h3><ul><li>制作各种大小的图标并存放在source/images/icons下。</li></ul><h3 id="新增manifest-json"><a href="#新增manifest-json" class="headerlink" title="新增manifest.json"></a>新增manifest.json</h3><ul><li><p>在hexo的source目录下添加一个manifest.json，内容类似：</p> <figure class="highlight json hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-punctuation">{</span></span><br><span class="line">   </span><br><span class="line">   &nbsp; &nbsp; <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"mykonakona"</span><span class="hljs-punctuation">,</span></span><br><span class="line">   &nbsp; &nbsp; <span class="hljs-attr">"short_name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"mykonakona"</span><span class="hljs-punctuation">,</span></span><br><span class="line">   &nbsp; &nbsp; <span class="hljs-attr">"theme_color"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"#222f3e"</span><span class="hljs-punctuation">,</span></span><br><span class="line">   &nbsp; &nbsp; <span class="hljs-attr">"background_color"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"#18222d"</span><span class="hljs-punctuation">,</span></span><br><span class="line">   &nbsp; &nbsp; <span class="hljs-attr">"display"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"standalone"</span><span class="hljs-punctuation">,</span></span><br><span class="line">   &nbsp; &nbsp; <span class="hljs-attr">"scope"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"/"</span><span class="hljs-punctuation">,</span></span><br><span class="line">   &nbsp; &nbsp; <span class="hljs-attr">"start_url"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"/"</span><span class="hljs-punctuation">,</span></span><br><span class="line">   &nbsp; &nbsp; <span class="hljs-attr">"icons"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span></span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-punctuation">{</span></span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-attr">"src"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"/images/icons/icon-48x48.png"</span><span class="hljs-punctuation">,</span></span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-attr">"sizes"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"48x48"</span><span class="hljs-punctuation">,</span></span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"image/png"</span><span class="hljs-punctuation">,</span></span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-attr">"purpose"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"any maskable"</span></span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span></span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; ...</span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-punctuation">{</span></span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-attr">"src"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"/images/icons/icon-512x512.png"</span><span class="hljs-punctuation">,</span></span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-attr">"sizes"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"512x512"</span><span class="hljs-punctuation">,</span></span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"image/png"</span><span class="hljs-punctuation">,</span></span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-attr">"purpose"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"any maskable"</span></span><br><span class="line">   &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-punctuation">}</span></span><br><span class="line">   &nbsp; &nbsp; &nbsp;<span class="hljs-punctuation">]</span></span><br><span class="line">   </span><br><span class="line"><span class="hljs-punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li></ul><p>图标与json也可以通过类似<a href="https://tools.crawlink.com/tools/pwa-icon-generator">PWA Application Icon Generator Free Online Tool</a>的在线工具生成。</p><h3 id="修改标签"><a href="#修改标签" class="headerlink" title="修改<head>标签"></a>修改&lt;head&gt;标签</h3><ul><li><p>修改所用hexo主题的模板文件，在head.ejs添加：</p> <figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"theme-color"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"#222f3e"</span>/&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"manifest"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/manifest.json"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p> 这里<code>theme-color</code>的<code>content</code>值与manifest.json内的值相同。</p></li></ul><h2 id="准备Service-Worker"><a href="#准备Service-Worker" class="headerlink" title="准备Service Worker"></a>准备Service Worker</h2><h3 id="新增service-worker-js"><a href="#新增service-worker-js" class="headerlink" title="新增service-worker.js"></a>新增service-worker.js</h3><ul><li><p>在hexo的source目录下新建一个sw.js文件（需要将正则处的mykonakona.github.io替换为自己的网址）：</p> <figure class="highlight javascript hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="hljs-string">'https://cdnjs.cloudflare.com/ajax/libs/workbox-sw/7.0.0/workbox-sw.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (workbox) {</span><br><span class="line"></span><br><span class="line">&nbsp; &nbsp; workbox.<span class="hljs-property">precaching</span>.<span class="">precache</span>([<span class="hljs-string">'/'</span>, <span class="hljs-string">'/index.html'</span>]);</span><br><span class="line">&nbsp; &nbsp; </span><br><span class="line">&nbsp; &nbsp; workbox.<span class="hljs-property">routing</span>.<span class="">registerRoute</span>(<span class="hljs-keyword">new</span> <span class="">RegExp</span>(<span class="hljs-string">'^https?://mykonakona.github.io/?$'</span>), <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="">NetworkFirst</span>());</span><br><span class="line">&nbsp; &nbsp; </span><br><span class="line">&nbsp; &nbsp; workbox.<span class="hljs-property">routing</span>.<span class="">registerRoute</span>(<span class="hljs-keyword">new</span> <span class="">RegExp</span>(<span class="hljs-string">'.*.html'</span>), <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="">NetworkFirst</span>());</span><br><span class="line">&nbsp; &nbsp; </span><br><span class="line">&nbsp; &nbsp; workbox.<span class="hljs-property">routing</span>.<span class="">registerRoute</span>(<span class="hljs-keyword">new</span> <span class="">RegExp</span>(<span class="hljs-string">'.*.(?:js|css|jpg|png|gif)'</span>), <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">strategies</span>.<span class="">StaleWhileRevalidate</span>());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p>NetworkFirst()与StaleWhileRevalidate()的使用，可参考<a href="https://github.com/GoogleChrome/workbox">workbox</a>的相关文档与教程。</p><h3 id="注册service-worker"><a href="#注册service-worker" class="headerlink" title="注册service-worker"></a>注册service-worker</h3><ul><li><p>修改所用hexo主题的模板文件，在footer后的style.ejs添加注册service-worker的代码段：</p> <figure class="highlight html hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-language-javascript"></span></span><br><span class="line"><span class="hljs-language-javascript">&nbsp; &nbsp; <span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">serviceWorker</span>) {</span></span><br><span class="line"><span class="hljs-language-javascript">&nbsp; &nbsp; navigator.<span class="hljs-property">serviceWorker</span>.<span class="">register</span>(<span class="hljs-string">'/sw.js'</span>);</span></span><br><span class="line"><span class="hljs-language-javascript">   }</span></span><br><span class="line"><span class="hljs-language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="设置不渲染"><a href="#设置不渲染" class="headerlink" title="设置不渲染"></a>设置不渲染</h3><ul><li><p>在hexo的_config.yml里，设置不渲染manifiest.json及sw.js：</p> <figure class="highlight yml hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">skip_render:</span></span><br><span class="line">&nbsp;<span class="hljs-bullet">-</span> <span class="hljs-string">manifest.json</span></span><br><span class="line">&nbsp;<span class="hljs-bullet">-</span> <span class="hljs-string">sw.js</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>PWA其实用处不大，添加这个主要是为了跑Lighthouse分。过程中意识到Hexo确实用的人越来越少了：很多插件缺乏维护，照搬文档还不如手工添加。</p><p>硬着头皮补课，网上的sw.js例子调试时报错频频。发现是因为最新的workbox-sw.js里，函数命名从<a href="https://zh.wikipedia.org/zh-hans/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB">小驼峰式</a>改成了大驼峰式。比如旧版本例子里的networkFist()如今都变成了NetworkFirst()。看来谷歌也要面对项目管理问题……</p><p>这个简单教程还是有一些前提的，比如PWA需要https支持等，这里不再赘述。</p></body></html>]]></content>
    
    
    <summary type="html">不要再装Hexo的那些PWA插件了。</summary>
    
    
    
    <category term="教程" scheme="http://mykonakona.github.io/categories/tutorial/"/>
    
    
    <category term="静态博客" scheme="http://mykonakona.github.io/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Hexo" scheme="http://mykonakona.github.io/tags/Hexo/"/>
    
    <category term="PWA" scheme="http://mykonakona.github.io/tags/PWA/"/>
    
    <category term="Service Worker" scheme="http://mykonakona.github.io/tags/Service-Worker/"/>
    
  </entry>
  
  <entry>
    <title>我的笔记工作流
</title>
    <link href="http://mykonakona.github.io/categories/experience/my-notebook-workflow/"/>
    <id>http://mykonakona.github.io/categories/experience/my-notebook-workflow/</id>
    <published>2023-08-27T13:31:18.000Z</published>
    <updated>2024-04-15T14:11:15.885Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>玩笔记软件算是赶时髦。</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在分享之前必须说明，我并不是一个经常记各种笔记的人，平时的阅读、记录或者写作都是比较散漫的。所以尽管阅读量并不小，但是因为缺乏提炼，导致日常的口头和文字表达常会出现啰嗦、逻辑不清的情况。</p><p>相比网友们顺其自然的管理，我对笔记的使用更像是一种为记而记的学习。通过强制自己使用笔记、稍后读这类软件及服务，我的表达欲有了一定的提升，思维和表达相比以前也更加清晰，为自身带来了明显的改变。</p><p>因此，我决定将还在摸索阶段的我个人的笔记工作流记录下来，供大家参考。</p><h2 id="核心链条"><a href="#核心链条" class="headerlink" title="核心链条"></a>核心链条</h2><p>我把我的知识管理流程分为三个阶段：</p><ul><li>收集——整理——提炼</li></ul><p>需要说明的是，并非是先根据这三个阶段来规划后续的工具使用，而是根据试用体验，精简了工具选型，再从实际的工具使用中反推出这三个阶段。</p><h2 id="用哪款笔记软件？"><a href="#用哪款笔记软件？" class="headerlink" title="用哪款笔记软件？"></a>用哪款笔记软件？</h2><p>工具选型首先从最主要的笔记软件看起。笔记软件应当成为整个知识管理流程中使用时间最长的工具，也是整个流程中使用到的工具的核心。</p><p>我曾是很长时间的国区Evernote用户，Notion也使用过一段时间。这次为了捋顺整个流程，还把Logseq、wolai等等都用了个遍。表面上看市面上可用的笔记软件非常非常多，但在明确了自己的需求后，会发现完全满足的几乎没有。</p><p>这些笔记软件中，最有实力的我认为还是Notion，但我最后还是决定使用Obsidian，选择的理由其实完全是基于对后续使用的规划：</p><ul><li>一个不常使用笔记的人，要建立起用笔记的习惯，首先需要的是启动速度快。Obsidian在笔记量比较少的时候，启动比起需要联网的Notion快得多；</li><li>基于网络服务的笔记软件很像是一个私有仓库的博客，有停运的风险。Obsidian同步可能得需要我去把文件夹挂载到某个网盘上，确实不那么酷。但搭配rclone后可以实现多副本，不用特地进行手动备份，也不用担心停运；</li><li>另一个原因比较个人：Notion的各种功能做得太好了，让我忍不住想去使用、研究，消耗了很多时间。Obsidian的功能也不少，但是功能上的易用性不如Notion，而且往往是以一种兴趣小组布道式的方式来推广，门槛高。不以折腾为目的话，反而可以老老实实地专注在记录本身上。</li></ul><p>只基于这些原因，似乎也没必要选用Obsidian。要想速度快，打开Notepad不是更快？但笔记软件的使用生态对于菜鸟来说也很重要。有相当的用户支持才能提高使用体验。</p><p>另外，除了这些理由，选择Obsidian还与我对稍后读的使用有关。</p><h2 id="稍后读怎么用？"><a href="#稍后读怎么用？" class="headerlink" title="稍后读怎么用？"></a>稍后读怎么用？</h2><p>稍后读服务其实并不新鲜。</p><p>Pocket毫无疑问是把这个概念发扬光大的APP，但在各家云笔记推出自己的Web Clipper服务之后，现在恐怕没有多少人会去用Pocket。但稍后读也在这个过程中逐渐具备了资料中转的属性。</p><p>发展到今天，用户已经可以选择cubox、剪藏等功能已经非常完备的服务。但这类服务的一大问题是服务器架设在国内。内容审查的风险虽然很低，但总不能自己先主动审查一遍来避免可能的麻烦吧。对我而言只是为了避免这种可能性，因此我使用开源的Omnivore。</p><p>Omnivore目前还并不成熟，不少用户反馈内容抓取其实是不如Pocket的。但它的优势是可以通过Obsidian插件将高亮、笔记内容同步到Obsidian去。这件事cubox也能干（同步到Notion）但cubox毕竟还是在国内。</p><p>现在，只要是网络上我认为有价值的内容，我都会集中收集到Omnivore里。在Omnivore里完成标签，高亮、笔记工作。最后推送到Obsidian。</p><p>Omnivore完成收集——整理——提炼这个链条的前半段，将信息流推送给Obsidian，通过<a href="https://zhuanlan.zhihu.com/p/360599265" title="用Obsidian实现Zettelkasten看这一篇就够了（上）">在Obsidian中实践ZK理念</a>，完成链条后半段的工作。</p><h2 id="巧用Front-Matter"><a href="#巧用Front-Matter" class="headerlink" title="巧用Front Matter"></a>巧用Front Matter</h2><p>为了黏合这这个过程，需要将将资料和笔记的格式统一起来。例如，Omnivore收集的资料导入Obsidian时，使用的<a href="https://docs.omnivore.app/integrations/obsidian.html#front-matter" title="Sync all your reading to Obsidian ">Front Matter</a>为：</p><figure class="highlight markdown hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">id: {{{id}}}</span><br><span class="line">title: &gt;</span><br><span class="line">  {{{title}}}</span><br><span class="line">{{#author}}</span><br><span class="line">author: &gt;</span><br><span class="line">  {{{author}}}</span><br><span class="line">{{/author}}</span><br><span class="line">{{#labels.length}}</span><br><span class="line">tags:</span><br><span class="line">{{#labels}} - {{{name}}}</span><br><span class="line">{{/labels}}</span><br><span class="line">{{/labels.length}}</span><br><span class="line">description: {{{description}}}</span><br><span class="line">{{#datePublished}}</span><br><span class="line">date<span class="hljs-emphasis">_published: {{{datePublished}}}</span></span><br><span class="line"><span class="hljs-emphasis">{{/datePublished}}</span></span><br><span class="line"><span class="hljs-emphasis">date_</span>saved: {{{dateSaved}}}</span><br><span class="line">origin<span class="hljs-emphasis">_url: {{{originalUrl}}}</span></span><br></pre></td></tr></tbody></table></figure><p>而在Obsidian里，所有的笔记新建我们都通过Obsidian的<code>创建时间戳笔记</code>来发起。时间戳笔记的格式均遵循以下模板：</p><figure class="highlight markdown hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">id: </span><br><span class="line">title: |</span><br><span class="line">  title</span><br><span class="line">author: |</span><br><span class="line">  me</span><br><span class="line">tags:</span><br><span class="line"><span class="hljs-bullet"> -</span> tag</span><br><span class="line">description: </span><br><span class="line">date<span class="hljs-emphasis">_published: </span></span><br><span class="line"><span class="hljs-emphasis">date_</span>saved: null</span><br><span class="line"><span class="hljs-section">origin<span class="hljs-emphasis">_url: null</span></span></span><br><span class="line"><span class="hljs-emphasis"><span class="hljs-section">---</span></span></span><br></pre></td></tr></tbody></table></figure><p>同时，对Obsidian中时间戳笔记和Omnivore插件进行配置，统一新建笔记的命名规则为<code>yyyyMMDDHHmmss</code>。</p><p>这时，不论是同步过来的资料还是新增的笔记，都做到了元数据和格式上的尽可能地统一。这种做法的优势在于，笔记的元数据整理起来很轻松，且能够几乎无缝地发布到博客上，节省了大量的时间。</p><h2 id="随手记的问题"><a href="#随手记的问题" class="headerlink" title="随手记的问题"></a>随手记的问题</h2><p>这套流程并非没有缺点。虽然从经济成本上它不需要使用任何付费服务，但伴随的问题就是<a href="https://forum-zh.obsidian.md/t/topic/15659" title="建议官方内置memos插件，完善随手记碎碎念功能">对于随手记没有很好的解决方案</a>。</p><p>电脑上还可以打开软件生成一条时间戳笔记进行记录，移动端就很难解决了。随手记的导入和移动端适配仿佛是鱼和熊掌。尤其是苹果生态和安卓生态的不统一，使得这个问题很难有一个多平台适配的答案。</p><p>一种解决方式是搭建<a href="https://github.com/usememos/memos" title="A privacy-first, lightweight note-taking service. Easily capture and share your great thoughts. ">memos服务器</a>再通过<a href="https://github.com/catnu/obsidian-memos-fetch" title="obsidian plugin to pull memos. Contribute to catnu/obsidian-memos-fetch development by creating an account on GitHub.">插件</a>导入，这对NAS用户其实挺友好的。或者通过其他服务（如flomo）来接管，但最后<a href="https://forum-zh.obsidian.md/t/topic/20120/3" title="各司其职：Flomo,Obsidian的联动使用">flomo与Obsidian的联动</a>还是需要手动完成，无法方便地一键导入。</p><p>后续我大概会采用一个很笨的方法：</p><ul><li>使用iPhone上的熊掌记；</li><li>日常的随手记通过手机的桌面组件进入后统一记录在一个文件里；</li><li>定期通过熊掌记的markdown格式导出功能把随手记手动同步到Onedrive上的Obsidian文件夹里。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>到此为止，回头再看整个过程，各个环节基本上都有了对应的解决方案。到此我对构建自己的笔记工作流的探索告一段落了。</p><p>我的方案并不完美，或许在今后的使用中，还会放弃许多今天的构想或者使用的工具。但比起用什么样的工具，我认为更重要的还是需求为本、做减法的思维方式以及自底向上的实践做法。</p><p>对我而言，这些指导思想或许已经在我的知识管理入门中发挥着潜移默化的作用。</p></body></html>]]></content>
    
    
    <summary type="html">相比网友们顺其自然的管理，我对笔记的使用更像是一种为记而记的学习。</summary>
    
    
    
    <category term="分享" scheme="http://mykonakona.github.io/categories/experience/"/>
    
    
    <category term="知识管理" scheme="http://mykonakona.github.io/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
    <category term="Obsidian" scheme="http://mykonakona.github.io/tags/Obsidian/"/>
    
    <category term="Omnivore" scheme="http://mykonakona.github.io/tags/Omnivore/"/>
    
  </entry>
  
  <entry>
    <title>R7000使用备忘
</title>
    <link href="http://mykonakona.github.io/categories/memo/r7000-memo/"/>
    <id>http://mykonakona.github.io/categories/memo/r7000-memo/</id>
    <published>2023-01-29T02:28:00.000Z</published>
    <updated>2024-04-15T14:11:15.885Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>家里的R7000已经服役了6年……</p><span id="more"></span><p>当时费很大劲刷好的梅林，固件号也伴随koolshare的各种骚操作停在了380.70_0-X7.9版本。</p><p>恐怕现在还在用这台机器的人已经不多了，记录一下一些日常的维护与配置以备查阅。</p><h2 id="硬重置"><a href="#硬重置" class="headerlink" title="硬重置"></a>硬重置</h2><p>最简单的硬重置方法是：</p><ul><li>在开机状态下使用卡针按住路由器后方的reset按钮30秒左右后松开。</li></ul><p>为避免变砖可能还需要<a href="https://www.right.com.cn/forum/thread-8267551-1-1.html" title="网件R7000捅菊花变砖">断电30秒后再插电30秒</a>。然而实际操作时没严格遵循该步骤，当时无事发生。</p><h2 id="设置连接名称密码"><a href="#设置连接名称密码" class="headerlink" title="设置连接名称密码"></a>设置连接名称密码</h2><p>重置后，路由器连接名称会变会Netgear。后续会使用smart connect，因此进入向导页面后只需要临时设置一下管理员名称和密码（建议只需使用默认密码00000000即可）。</p><p>向导完成后，连接wifi并访问：</p><p><a href="http://router.asus.com/Main_Login.asp">http://router.asus.com/Main_Login.asp</a></p><p>登入后，可以先进入外部网络选项卡，打开smart connect开关。</p><p>此时使用的wifi名称在保存应用后将不再区分2.4g和5g，而是根据smart connect rule进行切换，这部分的设置可以参考<a href="https://zhuanlan.zhihu.com/p/370147768" title="华硕路由器Smart Connect原理解析与硬核设置指南">华硕路由器Smart Connect原理解析与硬核设置指南</a>。</p><p>对于联系过运营商做过桥接改造的用户来说，还需要在外部网络选项卡将拨号选为PPPOE，并在PPP处填入运营商提供的用户、密码。</p><h2 id="解除软件中心限制"><a href="#解除软件中心限制" class="headerlink" title="解除软件中心限制"></a>解除软件中心限制</h2><p>可以正常访问网络后，先根据路由器提示打开jffs权限选项，再打开路由器的ssh功能，执行命令<a href="https://hq450.github.io/fancyss/" title="fancyss - 科学上网">解除软件中心的安装限制</a>：</p><figure class="highlight bash hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="hljs-string">'s/\tdetect_package/\t# detect_package/g'</span> /koolshare/scripts/ks_tar_install.sh</span><br></pre></td></tr></tbody></table></figure><p>或使用<a href="https://www.bilibili.com/read/cv9729050" title="Koolshare 软件中心离线安装限制 解除">其他方式</a>（如安装<a href="https://t.me/s/SukkaChannel?q=fuckkoolshare.tar.gz" title="解除 Koolshare 酷软中心 的离线安装限制的插件">fuckkoolshare.tar.gz</a>)。</p><h2 id="安装clash"><a href="#安装clash" class="headerlink" title="安装clash"></a>安装clash</h2><p>还在使用ss的用户，可以尝试寻找旧版本ss并安装。</p><p>clash用户安装merlin clash即可，它使用能够兼容xray的clash-meta内核。需要将规则配置文件修改为能够通过校验的格式并上传。</p><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>PT端口转发可参考<a href="https://cloud.tencent.com/developer/article/1624139" title="华硕Merlin梅林路由Synology群晖不能外网访问的踩坑记录">华硕Merlin梅林路由Synology群晖不能外网访问的踩坑记录</a>。</p><h2 id="配置导出"><a href="#配置导出" class="headerlink" title="配置导出"></a>配置导出</h2><p>最后为避免重复劳动，建议做一次配置及jffs的导出并备份。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>2.4G和5G指示灯不再闪烁可能是误触引起的（比如堆放了物件等），这时可以先长按面板右数第二个键数秒。</p></body></html>]]></content>
    
    
    <summary type="html">恐怕现在还在用这台机器的人已经不多了，记录一下一些日常的维护与配置以备查阅。</summary>
    
    
    
    <category term="笔记" scheme="http://mykonakona.github.io/categories/memo/"/>
    
    
    <category term="数码" scheme="http://mykonakona.github.io/tags/%E6%95%B0%E7%A0%81/"/>
    
    <category term="路由器" scheme="http://mykonakona.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>GSM alphabet
</title>
    <link href="http://mykonakona.github.io/categories/pitfall/gsm-alphabet-pitfall/"/>
    <id>http://mykonakona.github.io/categories/pitfall/gsm-alphabet-pitfall/</id>
    <published>2022-11-22T09:08:00.000Z</published>
    <updated>2024-04-15T14:11:15.885Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>这玩意为什么会影响邮箱验证？</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>手机上使用Outlook接管QQ邮箱或者163邮箱，需要开启邮箱的IMAP。</p><p>国内这些邮箱的IMAP开启，需要以类似二次验证的方式，在页面填写短信收到的授权码进行校验。</p><p>163邮箱在这个环节可以正常发送、验证，但QQ邮箱通过密保手机发送短信时就会弹出如下提示：</p><p><img src="/images/2022-11-22-alert.PNG" alt="“您发送的短信内容有误”"></p><p>核对了多遍，也没有发现内容哪里有误</p><p><img src="/images/2022-11-22-message.PNG" alt="实发短信内容无误"></p><h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><p>通过QQ邮箱的<a href="https://open.mail.qq.com/feedback/feedbackhome#/">反馈建议</a>提交了一个工单上去，QQ对这个问题的答复是：</p><blockquote><p>你好，出现这种情况一般有可能：用户手机终端本身没有把这个短信成功发送出来，请检查自己的手机状态是否正常，建议： 1、致电运营商客服电话，询问是否被禁止了端口短信功能/增值业务 网关（也叫做SP开关）； 2、发送短信到备用接收号码重试； 3、发送短信时去掉+86重试发送； 4、确认是否有发送扣费记录，若扣费成功，请提供【扣费记录截图】、【发送短信手机号（密保手机号）】、【发送短信时间】给我们，若没有扣费成功，请联系运营商，感谢配合！</p></blockquote><ul><li>第一点，肯定不可能，因为我的手机刚刚还在163邮箱那边成功打开了，应该不存在这个问题；</li><li>第二点，实际测试了一下，也可以正常发送接收；</li><li>第三点，看手机的短信页面，是不带86的；</li><li>第四点，短信查询余额，确实有扣费。</li></ul><p>这时变得有点像在做一道选择题，所有选项看起来都是对的。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>最大的可能还是出在+86这里，于是去电信查询详单，号码确实有问题：</p><p><img src="/images/2022-11-22-detail.PNG" alt="+86"></p><p>但手机上是没有显示+86的，那一定是哪里自行进行了添加。在仔细观察后我注意到了手机上的这个配置：</p><p><img src="/images/2022-11-22-GSM-alphabet.jpg" alt="GSM-alphabet"></p><p>关掉这一选项并重新发送短信，验证正常通过。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>或许在miui.eu上使用<a href="https://melroselabs.com/docs/reference/sms/gsm-alphabet/">GSM alphabet</a>这个选项的话，会对号码编码后再做短信的发送，所以虽然发短信时手输的号码不带+86，但查询的结果显示是加上+86的。</p><p>解决了这个小问题后又有点失落：如果腾讯像网易那样好好测试一下，是不是这个时间可以干别的去了。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>中途突然想到，有没可能通过安装<a href="https://www.foxmail.com/">Foxmail</a>客户端来开启IMAP，得到了一个很奇怪的结果：</p><ul><li>安装完成后进入默认的登录选项，会要求手动配置IMAP，这时输入框是无法填写的灰色。</li></ul><p>这很好理解：因为邮箱设置里IMAP也是没有开启的状态，不给登录也很正常。</p><p>但如果用QQ扫码登录，无需配置便可以正常通过Foxmail客户端使用邮箱。此时通过网页端查看，邮箱的IMAP设置依然是关闭的（但不知什么原因exchange设置好像给打开了）。</p></body></html>]]></content>
    
    
    <summary type="html">邮箱的IMAP验证通不过？看看手机里有没有个叫GSM alphabet的选项。</summary>
    
    
    
    <category term="踩坑" scheme="http://mykonakona.github.io/categories/pitfall/"/>
    
    
    <category term="数码" scheme="http://mykonakona.github.io/tags/%E6%95%B0%E7%A0%81/"/>
    
    <category term="邮箱" scheme="http://mykonakona.github.io/tags/%E9%82%AE%E7%AE%B1/"/>
    
    <category term="miui" scheme="http://mykonakona.github.io/tags/miui/"/>
    
  </entry>
  
  <entry>
    <title>修复qBittorrent的WebUI乱码
</title>
    <link href="http://mykonakona.github.io/categories/tutorial/qbittorrent-webui-mojibake/"/>
    <id>http://mykonakona.github.io/categories/tutorial/qbittorrent-webui-mojibake/</id>
    <published>2022-11-14T03:36:00.000Z</published>
    <updated>2024-04-15T14:11:15.885Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>qBittorrent的WebUI一直有个乱码问题。</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这个问题在网络上由来已久，其中不少受害者是和我一样的群晖NAS用户。</p><p>根据<a href="https://skyeysnow.com/forum.php?mod=viewthread&amp;tid=366&amp;extra=page=1">天雪的客户端支持列表</a>，我在群晖的docker安装了4.1.9版本的qBittorrent。这个版本的WebUI提供的功能很简陋，所以需要使用第三方WebUI替代。但修改WebUI路径并点击保存后，会跳转到一个<a href="https://github.com/PrintNow/MD-qBittorrent-web-ui/issues/2">乱码</a>页面，此后无法正常进入qBittorrent的登陆页面。</p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>首先要把qBittorrent恢复到正常状态，一种方式是在url后加上如下内容以<a href="https://www.reddit.com/r/qBittorrent/comments/ky01n4/web_ui_stuck_on_unacceptable_file_type_only/">调用api</a>：</p><p><code>/api/v2/app/setPreferences?json=%7B%22alternative_webui_enabled%22:false%7D</code></p><p>但经过实测，有些情况下这一方法是无效的，比如之前如果设置过语言为简体中文的话，报错信息为：</p><p><code>涓嶅彲鎺ュ彈鐨勬枃浠剁被鍨嬶紝鍙厑璁镐娇鐢ㄥ父瑙勬枃浠躲€�</code></p><p>而非:</p><p><code>"Unacceptable file type, only regular file is allowed"</code></p><p>所以最有效的方法还是直接修改qBittorrent的配置文件并重启。</p><p>在群晖等NAS中，可在docker管理界面-容器-详情-终端机-新增-通过命令启动，找到入口。随后输入<code>/bin/sh</code>开启终端。</p><p>之后在docker内部找到qBittorrent.conf，修改WebUI\AlternativeUIEnabled选项为false。</p><p>重启容器后重新正常访问qb的登陆页面。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>如果想要正常安装第三方WebUI并使用，一个重点是写对配置路径。</p><p>可以参考以下做法：</p><ol><li><p>若待挂载的各目录都安排在nas的绝对路径<code>/volume1/docker/qbittorrent/</code>下，这里<code>/docker</code>最好是一个有读写权限的共享文件夹，可以排除产生权限问题的可能；</p></li><li><p>新建容器时，除惯例挂载的config、data、downloads等文件夹外，新增一个挂载到<code>/docker/qbittorrent/webui</code>的<code>/webui</code>文件夹，用于存放UI文件并确保其可以被读取；</p></li><li><p>设置中文，在qb的配置菜单的备用WebUI选项填入docker内部的绝对路径，如：<code>/webui/qb-webui-linux-sc-sarasa/</code>，此时下一次目录为主题的private和public文件夹。</p></li></ol><p>这时点击保存，不再跳转乱码页面，第三方UI已可以正常显示。</p></body></html>]]></content>
    
    
    <summary type="html">qBittorrent的WebUI一直有个乱码问题。</summary>
    
    
    
    <category term="教程" scheme="http://mykonakona.github.io/categories/tutorial/"/>
    
    
    <category term="数码" scheme="http://mykonakona.github.io/tags/%E6%95%B0%E7%A0%81/"/>
    
    <category term="群晖" scheme="http://mykonakona.github.io/tags/%E7%BE%A4%E6%99%96/"/>
    
    <category term="docker" scheme="http://mykonakona.github.io/tags/docker/"/>
    
    <category term="qBittorrent" scheme="http://mykonakona.github.io/tags/qBittorrent/"/>
    
    <category term="PT" scheme="http://mykonakona.github.io/tags/PT/"/>
    
  </entry>
  
  <entry>
    <title>一次失败的刷剧经历
</title>
    <link href="http://mykonakona.github.io/categories/life/netflix-in-china/"/>
    <id>http://mykonakona.github.io/categories/life/netflix-in-china/</id>
    <published>2022-02-10T02:14:00.000Z</published>
    <updated>2024-04-15T14:11:15.885Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>国内刷剧太难啦……</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前gf想看《机智医生生活》第一季，因为这部剧没有引进，我自己的VPS当时还没做解锁，Netfilx只能看自制。只能四处帮她找下载。</p><p>找的过程中有一个感受：虽然追看韩剧的群体很庞大，但在国内看韩剧的体验实在不能算好。对这部剧，我个人觉得最方便省心地观看方式还是通过Netflix，无论是画质还是翻译质量都有相当保障。</p><p>但是国内看Netflix有多难大家都知道了，不仅需要购买DRM认证的专用设备（电视或电视盒），还需要解决机场或VPS搭建以及流媒体解锁等问题。对于只是想单纯刷剧，不太具备相关计算机知识的网友，基本上无人能在这一套折腾下坚持到成功收看。大部分人还是只能指望字幕组大善人通过发布资源的方式看剧。</p><p>字幕组发布的资源存在的一个最大问题就是画质。本身这种熟肉基本上都是内嵌字幕，注定要经过一轮压制，加上源本身可能不够高清，或者是考虑到小体积易于传播，所以画质会被压缩得更厉害。</p><p>所以我一开始的思路想找一找外挂字幕，源则通过一些PT站的发布资源解决。果然PT上的资源画质相当不错，但另一个问题来了，外挂字幕有是有，但是和我下载的这个源匹配不上，这可如何是好。</p><h2 id="希望"><a href="#希望" class="headerlink" title="希望"></a>希望</h2><p>我研究了一下手头上搜到的几个外挂字幕，一个是某国内字幕组为这部剧制作的ass字幕，这个字幕如果在我的plex上播放，需要经过一轮转换。由于plex的先天不足，转换后播放的速度会变得极慢，所以如果要用这个字幕，需要先进行一步ass转srt的工作。但由于这个字幕使用了特殊字体和一些特效，导致转换后的srt效果很差，再加上这个字幕时间轴本来也和我手头这个源不大对得上，所以还是pass掉了这个字幕。</p><p>第二个字幕是一个国内资源分享群发布的，惊喜地发现时间轴似乎是能对得上，但是前四集没有。完美主义发作下这个字幕也先搁置起来了。</p><p>第三个字幕是在国外网站上发布的一个Netflix源的字幕，我发现这个字幕似乎与第二个字幕一模一样，内容上唯一不同的是Netflix的字幕会在结尾标上译者的名字，第二个字幕可能是不想别人发现自己是直接拿来的，所以把这个信息给抹了（笑）。开始感觉离成功有点近了。</p><h2 id="绝望"><a href="#绝望" class="headerlink" title="绝望"></a>绝望</h2><p>接下来要做的就是想办法怎么把时间轴对准确，但实在不想花太多时间用软件一个一个去校准。我大致对比了一下第三个字幕和第二个字幕，感觉第二个字幕有点像是把第三个字幕整体延迟了11秒左右。</p><p>于是问题变成了有没有这样一个工具能够做到对srt的时间轴做整体的修改。结果还真发现了这样一个简陋的在线工具：<a href="https://subtitletools.com/subtitle-sync-shifter">subtitle-sync-shifter</a></p><p>当我做完字幕，以为这一切都尘埃落定的时候，现实又教我做人了。我坐在沙发度过了愉快的前20分钟，画质清晰，体验与Netflix相差无几，然而在二十分钟后，字幕开始对不上画面，每一句台词都开始先于角色出现在银幕里。我意识到，之前那个国内资源分享群那个字幕应该还是有其独到之处的，至少它花了时间帮你做了时间轴的校准……</p><p>痛苦，好像我要想好好看一下这部剧只能靠字幕组的内嵌字幕版本了。然而筛选各种版本的熟肉也让人纠结，有些字幕组喜欢夹带各种奇怪的片头，或者把字幕做得很大占据过多空间，虽然如此，我没有责怪他们的意思，只是觉得这么多人在为了看电视剧这件简单的事情付出了很多努力，但这件事本身不应该变得这么困难。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>最后我还是回到了一开始的方案，通过<a href="https://github.com/fscarmen/warp_unlock">流媒体解锁</a>让我的Netflix节点能够观看自制剧以外的剧集，尽管gf在之前那次不成功的观看过后已经打消了继续看下去的念头，但我收获了一点欣慰，至少以后她如果再想看个什么，我可以有个相对稳定可靠的选项来满足她的需求。</p></body></html>]]></content>
    
    
    <summary type="html">虽然很久不追剧了，但直到1202年的这个冬天我发现看个剧还是一件很难的事情。</summary>
    
    
    
    <category term="生活" scheme="http://mykonakona.github.io/categories/life/"/>
    
    
    <category term="数码" scheme="http://mykonakona.github.io/tags/%E6%95%B0%E7%A0%81/"/>
    
    <category term="流媒体" scheme="http://mykonakona.github.io/tags/%E6%B5%81%E5%AA%92%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu LTS软件源
</title>
    <link href="http://mykonakona.github.io/categories/pitfall/ubuntu-software-source/"/>
    <id>http://mykonakona.github.io/categories/pitfall/ubuntu-software-source/</id>
    <published>2021-03-30T02:02:00.000Z</published>
    <updated>2024-04-15T14:11:15.885Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>来自Ubuntu LTS的小意外。</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>为了备份VPS上的docker挂载数据到OneDrive，赶忙安装了restic。restic既有加密又有快照恢复，真是太棒啦！</p><p>但执行到<code>restic -r rclone:onedrive:backupfolder init</code>时，突然提示：</p><figure class="highlight bash hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fatal: create repository at rclone:onedrive:backupfolder failed: invalid backend</span><br></pre></td></tr></tbody></table></figure><p>一条简单的命令居然也会报错，这崩得也太快了，还没开始就结束？</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>如果这里的backend是invalid的，说明rclone连接有问题。</p><p>但实测命令<code>rclone lsd: onedrive</code>，能够正常显示目录结构。连接是有效的。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>restic论坛里提到过类似问题：<a href="https://forum.restic.net/t/restic-with-rclone/2373/13">restic-with-rclone</a>。</p><p>简单总结：根据源码分析，出现这个错误的原因是restic版本过时。备份到OneDrive需要使用rclone，但restic在0.9.0版本里才加入rclone支持。</p><p>被安装低版本的原因在于VPS安装的Ubuntu LTS系统，在运行<code>apt-get install resitc</code>后，安装的restic版本号是0.8.3。</p><p>本质其实是一个系统运维问题。</p><p>对普通用户而言，单台服务器跑跑小程序、代码，没必要追求生产环境的稳定，反而应当尽量与自己的开发、测试环境保持一致，以便于复现、还原异常与报错。</p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>要想对各类发行版一视同仁地安装restic的最新版本，自己编译是比较稳妥的方案：</p><h3 id="安装go环境"><a href="#安装go环境" class="headerlink" title="安装go环境"></a>安装go环境</h3><ul><li><p>根据go主页的<a href="https://golang.org/doc/install">Download and install</a>安装go环境。</p></li><li><p>下载官方包：</p><figure class="highlight bash hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/restic/restic/releases/download/v0.12.0/restic-0.12.0.tar.gz</span><br></pre></td></tr></tbody></table></figure></li><li><p>解压后执行<code>make</code>编译。</p></li><li><p>配置定时任务</p><ul><li><p>crontab</p><ul><li>可以先把<code>RESTIC_PASSWORD="here is your password"</code>加到<del>/.bashrc或者</del>/etc/profile里</li><li>之后<code>crontab -e</code>添加任务配置：</li></ul></li></ul><p><code>0 4 * * * . ~/.bashrc; /home/user/restic-0.12.0/restic       -r rclone:onedrivedb:Backup backup /home/usdata; /      home/user/restic-0.12.0/restic forget -q --prune       --keep-hourly 24 --keep-daily 7</code></p></li></ul></body></html>]]></content>
    
    
    <summary type="html">Ubuntu LTS固然稳定，但也会出现一些意想不到的使用问题。</summary>
    
    
    
    <category term="踩坑" scheme="http://mykonakona.github.io/categories/pitfall/"/>
    
    
    <category term="运维" scheme="http://mykonakona.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="VPS" scheme="http://mykonakona.github.io/tags/VPS/"/>
    
    <category term="Ubuntu" scheme="http://mykonakona.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>联想Yoga S740的糟心体验
</title>
    <link href="http://mykonakona.github.io/categories/life/yoga-s740-review/"/>
    <id>http://mykonakona.github.io/categories/life/yoga-s740-review/</id>
    <published>2020-09-04T14:32:00.000Z</published>
    <updated>2024-04-15T14:11:15.885Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>终于打算更换13年购买的Dell Vostro。</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>这台古董的硬盘、风扇甚至于键盘C面和D壳都已经被我换了个遍，可能就还剩屏幕没有动过。以为修修补补还可以坚持一段时间，但机器开始出现漏电问题，终于让我萌生了换机想法。</p><p>决定购机之后，我开始分析自己的需求，大体有以下几点：</p><ul><li>能做中度的视频剪辑和渲染</li><li>可以玩得动文明6或者欧陆风云4</li><li>内存16G，便于开虚拟机；硬盘512G起步</li><li>屏幕大小在14寸以内，厚度小于2cm</li><li>可以180度开合</li><li>接口不能太简陋，得基本够用</li><li>较长的续航</li><li>不要太贵（笑</li><li>……</li></ul><p>中度的视频剪辑和游戏都对CPU有一定要求，不能太菜了，不然每次还得开远程连家里的电脑做剪辑，太麻烦。</p><p>内存16G是为了能多开几个虚拟机。14寸以内也基本限定只能在轻薄本里挑。180度开合算是我个人一个喜好吧，我觉得这样摊开之后插显示器比较方便。</p><p>当时只是在脑海里粗略地列了一下，但基本是冲着这个方向去选机的。其实现在想想十分后悔，应该直接换Macbook Pro，本来Win系列本也已经用到有点吐了，但最后还是没有走出这一步，果然还是穷。</p><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><p>在各种奇奇怪怪的要求的引导下走进我视野的就是这台S740了。各种测评都有提到它的各种优点：</p><ul><li>3733Mhz的板载LPDDR4X内存，算是当前市面上笔记本所使用的最高频内存了</li><li>一块DC调光、72%NTSC、400nits的屏幕，素质相当好，并且这块屏是LTPS的低功耗屏，搭配62Wh的大容量电池，续航表现很不错</li><li>使用10代CPU，性能释放表现好</li><li>满血雷电3接口，WiFi6无线网卡</li></ul><p>那么实际上这台机器有没有各种测评说的这么好呢。从我自己的实际使用感受来看，这些优点是基本属实的。但这不意味着这台机器没有缺点了，事实上这台机器的缺点还不少：</p><p>首先，很不能让人忍受一点的就是这台机器的C面非常的尖锐，握持起来很不舒服。</p><p>其次，机器的键盘手感并没有一些测评里吹的那么好，虽然不算特别差，但击键的时候有时会出现卡键的情况。</p><p>另外这台机器的接口布局也不很合理，右边单独放了一个孤零零的USB，左边把电源口，雷电3接口，USB口和耳机口一股脑儿放在一起，使用时很拥挤。只配一个Type-C接口也显得很小气，多配一个把电源口砍掉不好么。</p><p>没有指纹解锁也是让人很费解的，我个人并不喜欢面部解锁，但因为这个原因也不得不用。</p><h2 id="售后"><a href="#售后" class="headerlink" title="售后"></a>售后</h2><p>在7月份左右的时候，掉盘了。虽然这台机器的SSD表现其实还是挺不错的，但这么快就掉盘实在是出乎我的意料。</p><p>没办法，只能联系联想上门维修。其实就是想着找它们免费换块盘。</p><p>等来了工程师上门，换完硬盘重装了系统，发现触摸板又不工作了……一般这种情况我们都会想着去找驱动装上，结果联想自己的官网上找不到相关的驱动。</p><p>这位联想工程师联系了自己的同事，说这款机器触摸板是免驱的，装上系统就能使用。结果他自己带来的系统又怎么装都不行……最后这位小哥问我之前的一次重装时用的是什么镜像，说要不你自己重装试试。弄得我也无语了……</p><p>后来的解决方案是把我的机器拿回了维修站，重装了一次出厂系统。触摸板的问题总算解决了。</p><p>感受就是联想内部管理挺混乱，虽然看起来他们自己有做移动端的知识库系统，但对自己新推的新机型的支持明显滞后。</p><p>包括一开始这位工程师想用PE进去机器看一看硬盘情况，结果发现自己的PE在这台机器上无法使用，换了好几套才进去，也给人感觉对新机型不熟悉。这次售后算是解决了问题，但体验还是很糟糕的。包括这台机器本身也给人一种不安定感。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在我也还在坚持用这台机器，因为这些缺点的存在，抵消了我对它优点的好感。用起来总是觉得不怎么舒服。</p><p>并且因为触摸板的缘故，只能继续用工作站重装的Win10家庭版，实在是痛苦，最大的感悟可能就是：下次换机我不会再想着省钱了。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>相当离谱，联想售后工程师在联想内部知识库找不到的触摸板驱动，我在联想美国官网找到了。</p><p>虽然当时他们非说是免驱版（包括我自己查了一些联想国内官网的说明也说触摸板是免驱，但实际上这个美国官网的触摸板驱动装完后我的触摸板就好了……）</p></body></html>]]></content>
    
    
    <summary type="html">没考虑换机之前，我手上服役的机器还是一台13年购买的Dell Vostro系列……</summary>
    
    
    
    <category term="生活" scheme="http://mykonakona.github.io/categories/life/"/>
    
    
    <category term="数码" scheme="http://mykonakona.github.io/tags/%E6%95%B0%E7%A0%81/"/>
    
    <category term="笔电" scheme="http://mykonakona.github.io/tags/%E7%AC%94%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>我搭静态博客
</title>
    <link href="http://mykonakona.github.io/categories/experience/my-static-blog/"/>
    <id>http://mykonakona.github.io/categories/experience/my-static-blog/</id>
    <published>2020-05-27T13:59:00.000Z</published>
    <updated>2024-04-15T14:11:15.885Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>为什么选择静态博客？</p><span id="more"></span><p>事实上不久之前，我还试图搭建了最近比较火的halo。域名、证书签发、反代的配置等等都做好了。但经过一系列的折腾，最后还是回来重新使用github page。</p><p>做这个选择的理由是——动态博客真的贵：好的域名需要钱，线路流畅的VPS也需要钱。廉价VPS服务商的线路一言难尽，反复的折腾让专注于记录本身变得困难。因此权衡下来我决定采用更具性价比的静态博客方案。</p><p>话虽如此，并不代表静态博客就完美无缺。相反，一些在动态博客中根本不能称之为问题的问题，在静态博客上就得通过各种“奇技淫巧”来解决。</p><p>因此本文基于hexo聊一聊在搭建过程中需要注意的点，同类型的生成器如pelican在使用中基本上围绕的也都是这些问题。</p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>现在流行的做法通过Travis CI自动部署github page，基本上都遵循如下步骤：</p><ol><li>新建一个<code>username.github.io</code>仓库，在github的<code>Settings - Developer settings - Personal access tokens</code>页面内为Travis CI新建一个github page专用，并赋予repo权限的access token；</li><li>使用github账号登陆Travis CI以完成账号关联，将access token作为<code>GH_TOKEN</code>加入到从github同步过去的仓库配置中，并在Travis CI中启用该仓库。</li><li>在本地安装npm、hexo。初始化hexo项目后，为本地项目添加.travis.yml，并完成_config.yml、.gitignore等相关配置；</li><li>为<code>username.github.io</code>新建一个<code>source</code>分支，将本地项目推送到这个source分支下。最终目的是让Travis CI根据source分支下.travis.yml中的设置的步骤生成静态文件，并把静态文件推送到<code>username.github.io</code>的<code>master</code>分支下。</li></ol><p>这部分的教程其实相当多了，如<a href="https://segmentfault.com/a/1190000021987832" title="Travis CI 加 Hexo 实现自动构建部署 Github Pages 博客">1</a>。在实际搭建时，可以根据自己的情况进行调整，并不需要照搬教程。</p><h2 id="主题开发"><a href="#主题开发" class="headerlink" title="主题开发"></a>主题开发</h2><p>如果你使用了比较成熟的主题，但又希望做一些个性化的定制，比较好的一种方式是把这个主题fork到自己的github账号下。并在本地环境中拉取fork的主题。这样做之后，本地的开发环境将会有两个仓库：</p><ul><li><p><code>username.github.io</code>的<code>source</code>分支</p></li><li><p><code>hexo-theme-themename</code>的<code>master</code>分支</p></li></ul><p>由于主题是一个独立分支，因此在自动部署时，一般会把<code>source</code>下的themes文件夹加入到这个分支的<code>.gitignore</code>里去，避免发生一些可能的修改冲突。</p><p>使用时，则通过在.travis.yml添加<code>git clone</code>命令引入主题并渲染，例如：</p><figure class="highlight bash hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">before_script:</span><br><span class="line">  - npm install -g hexo-cli </span><br><span class="line">  - <span class="hljs-built_in">mkdir</span> themes</span><br><span class="line">  - git <span class="hljs-built_in">clone</span> https://github.com/username/hexo-theme-themename.git themes/themename</span><br><span class="line"></span><br><span class="line">script: </span><br><span class="line">  - hexo generate</span><br></pre></td></tr></tbody></table></figure><h2 id="评论服务选型"><a href="#评论服务选型" class="headerlink" title="评论服务选型"></a>评论服务选型</h2><p>对动态博客来说几乎属于标配的评论功能，在静态博客上就得通过各种奇奇怪怪的方案去实现，并且往往还并不完美。我目前使用的主题minos支持的几种评论服务，就各自存在一些缺点：</p><h3 id="disqus"><a href="#disqus" class="headerlink" title="disqus"></a>disqus</h3><p>国内网络环境下的访问实在是太慢了，非常影响浏览体验。</p><ul><li><p>一种方式是把disqus隐藏在一个按钮中，相当于用户只有在点击该评论按钮后才会加载disqus，属于一个治标不治本的方案。</p></li><li><p>如果坚持使用disqus，可以考虑参考<a href="https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/#Disqus-Lazyload" title="使 Disqus 不再拖累性能和页面加载">2</a>，但我个人感觉还是会有拖慢。</p></li></ul><h3 id="gitment-gitalk"><a href="#gitment-gitalk" class="headerlink" title="gitment/gitalk"></a>gitment/gitalk</h3><p>单独为这类评论服务建一个存放issue仓库倒还不是最麻烦的地方，最麻烦的是每篇博文好像都得手动加issue，虽然github也有网友写了脚本完成这一工作，但易用性还是大大降低了。</p><p>另外gitment已经停止更新，一些常见问题如<a href="https://github.com/imsun/gitment/issues/100" title="总是提示 [object XMLHttpRequestProgressEvent] #100">object XMLHttpRequestProgressEvent</a>、<a href="https://github.com/imsun/gitment/issues/178" title="hexo博客的gitment评论开启一直失败">hexo上的开启失败</a>等只能通过网友提供的各种方案加以解决，这一点也十分劝退我。</p><h3 id="isso"><a href="#isso" class="headerlink" title="isso"></a>isso</h3><p>使用体验最好的一个，但并没有选用它。这实际上涉及的是一个理念问题：isso需要自行搭建，也就是说又得放在VPS上，那为什么不直接选用一个自带评论的动态博客方案呢，和我搭静态博客的出发点相矛盾。当然，对于不介意这点的朋友，这个服务还是推荐的。</p><h3 id="valine"><a href="#valine" class="headerlink" title="valine"></a>valine</h3><p>目前这个博客上部署的方案，没有上面一些比较恶心的问题。但leancloud这个服务能坚持多久是比较让我担心的地方……</p><p>综上所述，可以看到静态博客的评论实在是一大痛点。虽然有各种各样的解决方案，但始终只能算马马虎虎能用，难以达到动态博客的使用体验。</p><h2 id="搜索引擎收录及SEO优化"><a href="#搜索引擎收录及SEO优化" class="headerlink" title="搜索引擎收录及SEO优化"></a>搜索引擎收录及SEO优化</h2><p>目前google的网址前缀收录的推荐方式是通过校验html来完成，步骤可参考<a href="https://kennyliblog.nctu.me/2019/06/24/Google-search-Hexo-Blog/" title="實作 - 讓 Google 能搜尋到自己的 Hexo Blog">5</a>，SEO优化方面的文章也很多，如<a href="https://juejin.im/post/5ae7fc18518825672565a7f0#heading-4" title="Hexo 个人博客 SEO 优化（3）：改造你的博客，提升搜索引擎排名">6</a>，这里就不再赘述了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>完成这些内容后，你的静态博客相当于拥有了基本的功能。后续包括<a href="https://dengcb.com/zh/hexo-minos-multi-language/" title="用Minos搭建Hexo全站多语言站点">全站多语言支持</a>、<a href="https://blog.skk.moe/post/img-lazyload-hexo/" title="图片 lazyload 的学问和在 Hexo 上的最佳实践">图片懒加载</a>等等，都是可以持续优化的方面。</p><p>当然，对于一个博客来说，最重要的永远是内容。希望大家不要被各种花俏的技巧蒙蔽了双眼，为了搭博客而搭博客。而是通过搭博客培养兴趣和动手能力，在兴趣驱动下，继续分享自己的思考与创意😁</p></body></html>]]></content>
    
    
    <summary type="html">做这个选择的理由是——动态博客真的贵</summary>
    
    
    
    <category term="分享" scheme="http://mykonakona.github.io/categories/experience/"/>
    
    
    <category term="静态博客" scheme="http://mykonakona.github.io/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Hexo" scheme="http://mykonakona.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>一个Powershell小脚本
</title>
    <link href="http://mykonakona.github.io/categories/memo/powershell-telnet-script/"/>
    <id>http://mykonakona.github.io/categories/memo/powershell-telnet-script/</id>
    <published>2017-07-07T07:19:09.000Z</published>
    <updated>2024-04-15T14:11:15.885Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>验证网络打通之余熟悉了Powershell语法。</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Win环境下可以通过Powershell便捷地进行一些批量操作，如telnet一系列的对端机器。</p><p>类似问题可见：</p><p><a href="https://stackoverflow.com/questions/20583686/automate-telnet-port-testing-on-windows-7-using-batch-script">Automate Telnet Port Testing On Windows 7 Using Batch Script</a></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight powershell hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#powershell ExecutionPolicy Bypass</span></span><br><span class="line"><span class="hljs-comment">#powershell -File ./telnet.ps1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-variable">$iplist</span> = <span class="hljs-built_in">Get-Content</span> C:\iplist.txt</span><br><span class="line"><span class="hljs-variable">$regH</span> = <span class="hljs-string">"\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b"</span></span><br><span class="line"><span class="hljs-variable">$regP</span> = <span class="hljs-string">"\s(?&lt;alp&gt;\d{1,5})"</span></span><br><span class="line"><span class="hljs-variable">$remoteHost</span> = <span class="hljs-string">""</span></span><br><span class="line"><span class="hljs-variable">$Port</span> = <span class="hljs-string">""</span></span><br><span class="line"><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$i</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$iplist</span>){</span><br><span class="line">    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span> <span class="hljs-operator">-match</span> <span class="hljs-variable">$regH</span>){</span><br><span class="line">        <span class="hljs-variable">$remoteHost</span> = <span class="hljs-variable">$Matches</span>[<span class="hljs-number">0</span>];</span><br><span class="line">        <span class="hljs-comment">#write-host "$remoteHost";</span></span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span> <span class="hljs-operator">-match</span> <span class="hljs-variable">$regP</span>){</span><br><span class="line">        <span class="hljs-variable">$Port</span> = <span class="hljs-variable">$Matches</span>.alp;</span><br><span class="line">        <span class="hljs-comment">#write-host "$remotePort";</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">try</span> {</span><br><span class="line">        <span class="hljs-variable">$socket</span> = <span class="hljs-built_in">new-object</span> System.Net.Sockets.TcpClient(<span class="hljs-variable">$remoteHost</span>, <span class="hljs-variable">$port</span>)</span><br><span class="line">    } <span class="hljs-keyword">catch</span> [<span class="hljs-type">Exception</span>] {</span><br><span class="line">        <span class="hljs-built_in">write-host</span> <span class="hljs-variable">$remoteHost</span><span class="hljs-string">":"</span><span class="hljs-variable">$port</span> <span class="hljs-string">"Unconnected`n"</span></span><br><span class="line">       <span class="hljs-comment">#write-host $_.Exception.GetType().FullName</span></span><br><span class="line">       <span class="hljs-comment">#write-host $_.Exception.Message</span></span><br><span class="line">        <span class="hljs-keyword">continue</span></span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-built_in">write-host</span> <span class="hljs-variable">$remoteHost</span><span class="hljs-string">":"</span><span class="hljs-variable">$port</span> <span class="hljs-string">"Connected`n"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中不同于一般正则的地方的是<code>?&lt;alp&gt;</code>的添加，这部分较通俗的解释可见：<br><a href="http://blog.csdn.net/bluelilyabc/article/details/17119819">PowerShell中正则表达式的运用</a></p><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>执行该脚本前，将准备好的iplist.txt放到指定路径下（文中指定的路径为C:\iplist.txt），内容大致如下：</p><figure class="highlight text hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 8080</span><br><span class="line">127.0.0.1 80</span><br></pre></td></tr></tbody></table></figure><p>再回到powershell下输入以下命令以获得执行权限。</p><figure class="highlight bash hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell ExecutionPolicy Bypass</span><br></pre></td></tr></tbody></table></figure><p>获得权限后，输入如下指令执行该脚本文件。</p><figure class="highlight bash hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -File ./telnet.ps1</span><br></pre></td></tr></tbody></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>该脚本主要包括三部分工作：</p><ol><li>读入准备好的iplist.txt文件；</li><li>使用正则逐行取出需要测试的ip及端口号；</li><li>将取出的ip和端口号填入System.Net.Sockets.TcpClient函数中并测试对应的ip及端口。</li></ol></body></html>]]></content>
    
    
    <summary type="html">用途主要是验证网络打通，顺便熟悉了Powershell语法。</summary>
    
    
    
    <category term="笔记" scheme="http://mykonakona.github.io/categories/memo/"/>
    
    
    <category term="运维" scheme="http://mykonakona.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="Powershell" scheme="http://mykonakona.github.io/tags/Powershell/"/>
    
  </entry>
  
</feed>
