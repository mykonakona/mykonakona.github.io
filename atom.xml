<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mykonakona</title>
  
  <subtitle>Just Another Weblog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mykonakona.github.io/"/>
  <updated>2021-01-08T07:38:04.241Z</updated>
  <id>http://mykonakona.github.io/</id>
  
  <author>
    <name>mykonakona</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>给自己VPS的新服务新增证书</title>
    <link href="http://mykonakona.github.io/2021/01/08/add-https-for-new-web-service-on-vps/"/>
    <id>http://mykonakona.github.io/2021/01/08/add-https-for-new-web-service-on-vps/</id>
    <published>2021-01-08T07:28:00.000Z</published>
    <updated>2021-01-08T07:38:04.241Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>我已经忘记为啥我这个站没法生成通配符证书了，现在每加一个应用就得重新生成一遍，还是挺折腾的，很容易忘记。我还是先把这个过程记下来吧。</p><a id="more"></a><p>先去购买域名网站的配置页面那里给这次想使用的子域名che.xxx.xyz更新一条DNS记录，DNS更新大概15到20分钟左右时间。</p><p>这次加的是chevereto这个图床应用，直接用官网的docker-compose.yml改一下分配的端口号，之后通过<code>docker-compose up -d</code>进行安装。</p><p>这时候还只能通过ip加端口形式访问，所以需要在nginx中加配置，把che.xxx.xyz这个域名配置成我在/home/wwwroot/下布好的一个静态网页。然后重启nginx服务让配置生效，好像用restart或者reload都行。</p><p>之后要用到acme.sh了：</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --issue  -d che.xxx.xyz --webroot  /home/wwwroot/XXX</span><br><span class="line"></span><br><span class="line">acme.sh --installcert -d che.xxx.xyz --keypath  /data/che.xxx.xyz.key  --fullchainpath /data/che.xxx.xyz.fc.cer --reloadcmd  "service nginx reload"</span><br></pre></td></tr></tbody></table></figure><p></p><p>这两个命令分别做了生成证书以及把证书安装到指定位置，这次做的时候我把第二步给忘了，是手动拷贝过去改名字的，所以拷错了文件，加载配置时报了<a href="https://ma.ttias.be/nginx-ssl-certificate-errors-pem_read_bio_x509_aux-pem_read_bio_x509-ssl_ctx_use_privatekey_file/" target="_blank" rel="noopener">PEM_read_bio_X509_AUX</a>这个错。所以还是用脚本吧。</p><p>证书部分完成后就是重新修改nginx的配置，这次得按照正式使用的场景进行修改，改完后还是同样需要让新配置生效。</p><p>nginx生效后，就可以通过https访问了。</p><p>后记：其实图床这个事情也和<a href="https://mykonakona.github.io/2020/05/27/the-way-I-build-a-static-blog/">我搭静态博客</a>的想法或者说理念有点冲突，实际是有人拿github直接做图床的，想了想还是不大好意思这么做。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;我已经忘记为啥我这个站没法生成通配符证书了，现在每加一个应用就得重新生成一遍，还是挺折腾的，很容易忘记。我还是先把这个过程记下来吧。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="coding" scheme="http://mykonakona.github.io/categories/coding/"/>
    
    
      <category term="VPS" scheme="http://mykonakona.github.io/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>如何解决智冠版天龙八部等繁体Windows老游戏在Win10下的乱码问题</title>
    <link href="http://mykonakona.github.io/2020/12/08/how-to-solve-the-traditional-chinese-garbled-code-problem-of-old-windows-games/"/>
    <id>http://mykonakona.github.io/2020/12/08/how-to-solve-the-traditional-chinese-garbled-code-problem-of-old-windows-games/</id>
    <published>2020-12-08T08:45:00.000Z</published>
    <updated>2021-01-08T07:38:04.241Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>这个问题早已有之，早期的解决方案是安装AppLocale等软件进行转码，但上述软件目前在Win10环境下基本全部失效。</p><a id="more"></a><p>以智冠版天龙八部为例，在目前可以搜索到的相关资源贴中给出了两种解决方案：</p><ul><li><p>方案一：修改配置文件，并“把XP到WIN10区域与语言切换到繁体”</p></li><li><p>方案二：使用游戏转码大师（见下图）</p></li></ul><p><img src="https://www.ppxclub.com/forum.php?mod=attachment&amp;aid=OTc5Nzk3fDQxYjljYmIwfDE2MDc0MTgxNTR8NjEwMjE3fDcwMDc5OA%3D%3D" alt="yxzmds"></p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">方案一在每次玩游戏时都需要修改区域与语言，相当麻烦。</span><br><span class="line"></span><br><span class="line">方案二则有两个问题：</span><br><span class="line"></span><br><span class="line">一、这个软件年久失修，目前已经很难鉴别网络上可下载的版本中哪个是可靠的；</span><br><span class="line"></span><br><span class="line">二、笔者下载了诸多版本，在目前的Win10环境统统会报毒，于是没有再继续通过虚拟机或者沙盒尝试使用了，有兴趣的朋友可以试下。</span><br></pre></td></tr></tbody></table></figure><p></p><p>因此这里介绍一个新的解决方案给有老Windows游戏游玩需求却又苦于乱码问题的玩家：使用<a href="https://pooi.moe/Locale-Emulator/" target="_blank" rel="noopener">Locale Emulater</a>。</p><p>根据介绍，这个工具开发的目的主要是为了解决日文AVG在中文环境下游玩的乱码问题，但经本人实测对繁中版游戏的乱码问题也能完美解决。</p><p>该软件完成安装后，会在右键菜单中添加Locale Emulater选项，使用方式为右键游戏程序，在菜单中以此点击“Locale Emulater”、“修改此程序的配置”，会弹出下方窗口。</p><p><img src="https://i.loli.net/2020/12/11/VefS94ma62C3vPb.png" alt="bh.PNG"></p><p>对繁中游戏，调整“预置配置”与“时区”即可，保存后可以通过“建立快捷方式”，将调整配置后的快捷方式生成到桌面，便于下次调用。</p><p>实测截图如下，Win10下可正常显示智冠版天龙八部，开始畅玩吧！</p><p><img src="https://i.loli.net/2020/12/11/gCJLtSaiIA34Exv.png" alt="dragontc.png"></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;这个问题早已有之，早期的解决方案是安装AppLocale等软件进行转码，但上述软件目前在Win10环境下基本全部失效。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://mykonakona.github.io/categories/life/"/>
    
    
      <category term="game" scheme="http://mykonakona.github.io/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>抖音自动点赞</title>
    <link href="http://mykonakona.github.io/2020/11/16/douyin-auto-thumbup/"/>
    <id>http://mykonakona.github.io/2020/11/16/douyin-auto-thumbup/</id>
    <published>2020-11-16T08:04:00.000Z</published>
    <updated>2021-01-08T07:38:04.241Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>因为一些主播会把点赞达到多少万作为一项指标，自己又懒得点，所以想把这个工作给自动化。</p><p>现在可以搜到的实现基本都是基于adb的，这是一个简陋的整合了相关资料的win下的教学。</p><p>其原理为：直接使用adb的点击事件速度会不够快，可以通过记录用户操作再输出的方式模拟在dy主播界面快速点击的行为。</p><a id="more"></a><ol><li><p>下载一个安卓模拟器（本文使用夜神模拟器）并安装，完成安装后在模拟器内安装dy，登录已经关注主播的抖音账号，并进入直播页面</p></li><li><p>通过命令行进入nox_adb.exe所在目录（命令为默认安装位置）：cd “C:\Program Files (x86)\Nox\bin"</p></li><li><p>进入夜神模拟器的adb shell：nox_adb shell</p></li><li><p>进入shell后，准备记录输入操作到一个新建的recordtap文件内：dd if=/dev/input/event5 of=/sdcard/recordtap，具体是event5或其他（如event1等）可在shell中通过getevent命令查询</p></li><li><p>回到模拟器的直播页面，在屏幕上重复快速点击</p></li><li><p>退出adb shell（如快捷键无效，可关掉命令行窗口后重开）</p></li><li><p>重新进入adb shell，直接写成一个死循环，运行命令：    </p><p> i=1; while [ i -gt 0 ];  do dd if=/sdcard/recordtap of=/dev/input/event5;sleep 5; done</p></li><li><p>多开时直接执行nox_adb shell会报 error: more than one device and emulator，这时需要先nox_adb devices查看当前有设备与模拟器：</p><p> C:\Program Files (x86)\Nox\bin&gt;nox_adb devices<br> List of devices attached<br> 127.0.0.1:62025 device<br> 127.0.0.1:62001 device</p></li><li><p>在执行adb命令时，为命令指定设备的序列号<code>nox_adb -s 127.0.0.1:62025 shell</code></p></li></ol><p>说明：</p><p>使用夜神安卓模拟器的ADB指令时，需要将adb改为nox_adb，如nox_adb devices对应adb devices，nox_adb shell对应adb shell。</p><p>参考：</p><p><a href="https://www.jianshu.com/p/7c565eab821d" target="_blank" rel="noopener">https://www.jianshu.com/p/7c565eab821d</a></p><p><a href="https://blog.csdn.net/gaojinshan/article/details/9455193" target="_blank" rel="noopener">https://blog.csdn.net/gaojinshan/article/details/9455193</a></p><p><a href="https://www.yeshen.com/faqs/ByPpRoflZ" target="_blank" rel="noopener">https://www.yeshen.com/faqs/ByPpRoflZ</a></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;因为一些主播会把点赞达到多少万作为一项指标，自己又懒得点，所以想把这个工作给自动化。&lt;/p&gt;
&lt;p&gt;现在可以搜到的实现基本都是基于adb的，这是一个简陋的整合了相关资料的win下的教学。&lt;/p&gt;
&lt;p&gt;其原理为：直接使用adb的点击事件速度会不够快，可以通过记录用户操作再输出的方式模拟在dy主播界面快速点击的行为。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="coding" scheme="http://mykonakona.github.io/categories/coding/"/>
    
    
      <category term="android" scheme="http://mykonakona.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>聊聊Yoga S740</title>
    <link href="http://mykonakona.github.io/2020/09/04/lenovo-yoga-s740-review/"/>
    <id>http://mykonakona.github.io/2020/09/04/lenovo-yoga-s740-review/</id>
    <published>2020-09-04T14:32:00.000Z</published>
    <updated>2021-01-08T07:38:04.241Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>Yoga S740从4月份入手后到现在已经使用了近5个月了，这里想简单聊聊自己的一些使用上的体验。</p><a id="more"></a><p>在没有考虑换机之前，我手上服役的机器还是一台13年购买的Dell Vostro系列。这台机器的硬盘、风扇甚至于键盘C面和D壳都已经被我换了个遍，可能就还剩屏幕没有动过。以为修修补补还可以坚持一段时间，但在数不清是第几次漏电之后，我终于还是受不了了。</p><p>决定购机之后，我开始分析自己的需求，大体有以下几点：</p><ul><li>能做中度的视频剪辑和渲染</li><li>可以玩得动文明6或者欧陆风云4</li><li>内存16G，便于开虚拟机；硬盘512G起步</li><li>屏幕大小在14寸以内，厚度小于2cm</li><li>可以180度开合</li><li>接口不能太简陋，得基本够用</li><li>较长的续航</li><li>不要太贵（笑</li><li>……</li></ul><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中度的视频剪辑和游戏都对CPU有一定要求，不能太菜了，不然每次还得开远程连家里的电脑做剪辑，太麻烦。内存16G是为了能多开几个虚拟机。14寸以内也基本限定只能在轻薄本里挑。180度开合算是我个人一个喜好吧，我觉得这样摊开之后插显示器比较方便。</span><br></pre></td></tr></tbody></table></figure><p></p><p>当时只是在脑海里粗略地列了一下，但基本是冲着这个方向去选机的。其实现在想想十分后悔，应该直接换Macbook Pro，本来Win系列本也已经用到有点吐了，但最后还是没有走出这一步，果然还是穷。</p><p>在各种奇奇怪怪的要求的引导下走进我视野的就是这台S740了。各种测评都有提到它的各种优点：</p><ul><li>3733Mhz的板载LPDDR4X内存，算是当前市面上笔记本所使用的最高频内存了</li><li>一块DC调光、72%NTSC、400nits的屏幕，素质相当好，并且这块屏是LTPS的低功耗屏，搭配62Wh的大容量电池，续航表现很不错</li><li>使用10代CPU，性能释放表现好</li><li>满血雷电3接口，WiFi6无线网卡</li></ul><p>那么实际上这台机器有没有各种测评说的这么好呢。从我自己的实际使用感受来看，这些优点是基本属实的。但这不意味着这台机器没有缺点了，事实上这台机器的缺点还不少：</p><p>首先，很不能让人忍受一点的就是这台机器的C面非常的尖锐，握持起来很不舒服。其次，机器的键盘手感并没有一些测评里吹的那么好，虽然不算特别差，但击键的时候有时会出现卡键的情况。另外这台机器的接口布局也不很合理，右边单独放了一个孤零零的USB，左边把电源口，雷电3接口，USB口和耳机口一股脑儿放在一起，使用时很拥挤。只配一个Type-C接口也显得很小气，多配一个把电源口砍掉不好么。</p><p>没有指纹解锁也是让人很费解的，我个人并不喜欢面部解锁，但因为这个原因也不得不用。</p><p>在7月份左右的时候，掉盘了。虽然这台机器的SSD表现其实还是挺不错的，但这么快就掉盘实在是出乎我的意料。没办法，只能联系联想上门维修。其实就是想着找它们免费换块盘。</p><p>等来了工程师上门，换完硬盘重装了系统，发现触摸板又不工作了……一般这种情况我们都会想着去找驱动装上，结果联想自己的官网上找不到相关的驱动。这位联想工程师联系了自己的同事，说这款机器触摸板是免驱的，装上系统就能使用。结果他自己带来的系统又怎么装都不行……最后这位小哥问我之前的一次重装时用的是什么镜像，说要不你自己重装试试。弄得我也无语了……</p><p>后来的解决方案是把我的机器拿回了维修站，重装了一次出厂系统。触摸板的问题总算解决了。但给我的感受就是联想内部管理挺混乱，虽然看起来他们自己有做移动端的知识库系统，但对自己新推的新机型的支持明显滞后。包括一开始这位工程师想用PE进去机器看一看硬盘情况，结果发现自己的PE在这台机器上无法使用，换了好几套才进去，也给人感觉对新机型不熟悉。这次售后算是解决了问题，但体验还是很糟糕的。包括这台机器本身也给人一种不安定感。</p><p>现在我也还在坚持用这台机器，因为这些缺点的存在，抵消了我对它优点的好感。用起来总是觉得不怎么舒服。并且因为触摸板的缘故，我现在只能继续用工作站重装的Win10家庭版，实在是痛苦。现在看来，最大的感悟可能就是：下次换机我不会再想着省钱了。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Yoga S740从4月份入手后到现在已经使用了近5个月了，这里想简单聊聊自己的一些使用上的体验。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://mykonakona.github.io/categories/life/"/>
    
    
      <category term="laptop" scheme="http://mykonakona.github.io/tags/laptop/"/>
    
  </entry>
  
  <entry>
    <title>acme.sh的Verify error:Invalid response from报错</title>
    <link href="http://mykonakona.github.io/2020/08/24/acme-verify-error/"/>
    <id>http://mykonakona.github.io/2020/08/24/acme-verify-error/</id>
    <published>2020-08-24T08:49:00.000Z</published>
    <updated>2021-01-08T07:38:04.241Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>之前在hostdare购入过一台VPS，速度一般，所以拿来做备胎，乱七八糟部了一些服务在上面，考虑到最低限度的安全，用acme给每个服务都手动生成了一遍证书，还挺麻烦的（当时因为一些原因，通配符证书没能用起来……）。</p><p>其中最常用的一个自用服务是freshrss，今天访问时突然发现证书过期了，按说acme是可以自动续期的。查了一下<code>acme.sh.log</code>，报了一条这个错误：</p><a id="more"></a><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Mon Aug 24 00:09:56 CST 2020] yousite.xyz:Verify error:Invalid response from https://yousite.xyz/.well-known/acme-challenge/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [*.*.*.*]: 404</span><br></pre></td></tr></tbody></table></figure><p></p><p>说明acme是有在自动去更新证书的，但是到verify这一步时会通不过。查了一下，发现项目里面有一条issue：<a href="https://github.com/acmesh-official/acme.sh/issues/132" target="_blank" rel="noopener" title="Verify error:Invalid response #132">Verify error:Invalid response #132</a>里有解答：</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">同样遇到这个问题，如果是nginx的话，一般是因为服务器拒绝访问，解决方法2个，都是为了获取访问权限：</span><br><span class="line"></span><br><span class="line">1.在include *.conf; 下方加入部分代码：</span><br><span class="line"></span><br><span class="line">server {</span><br><span class="line"></span><br><span class="line">listen 80;</span><br><span class="line"></span><br><span class="line">server_name yoursite.com www.yoursite.com;</span><br><span class="line"></span><br><span class="line">include *.conf;      // 加入以下代码；</span><br><span class="line"></span><br><span class="line">       location ^~ /.well-known/acme-challenge/ </span><br><span class="line">    {</span><br><span class="line">        default_type "text/plain";</span><br><span class="line">        root  /home/wwwroot/yoursite;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    location = /.well-known/acme-challenge/ </span><br><span class="line">    {</span><br><span class="line">        try_files $uri =404;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">2.在 yoursite.conf 中，把拒绝访问代码注释掉，如下：</span><br><span class="line"></span><br><span class="line">        #  location ~ /\.</span><br><span class="line">        #  {</span><br><span class="line">        #      deny all;</span><br><span class="line">        #  }</span><br></pre></td></tr></tbody></table></figure><p></p><p>我的nginx把各服务的配置单独放在了新建的<code>\etc\nginx\conf\conf.d\xxx.conf</code>，所以这里<code>location</code>部分要放到<code>xxx.conf</code>下，后续要做的就是重新加载nginx的配置：</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/sbin</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></tbody></table></figure><p></p><p>为了验证配置是否生效，这里更新了一下acme之后做了一次证书手动更新。</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.acme.sh/</span><br><span class="line">acme.sh --upgrade</span><br><span class="line">acme.sh --renew  -d domain.com</span><br></pre></td></tr></tbody></table></figure><p></p><p>这次签发成功了，于是又水了一贴（部分信息做了脱敏处理）……</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;之前在hostdare购入过一台VPS，速度一般，所以拿来做备胎，乱七八糟部了一些服务在上面，考虑到最低限度的安全，用acme给每个服务都手动生成了一遍证书，还挺麻烦的（当时因为一些原因，通配符证书没能用起来……）。&lt;/p&gt;
&lt;p&gt;其中最常用的一个自用服务是freshrss，今天访问时突然发现证书过期了，按说acme是可以自动续期的。查了一下&lt;code&gt;acme.sh.log&lt;/code&gt;，报了一条这个错误：&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="coding" scheme="http://mykonakona.github.io/categories/coding/"/>
    
    
      <category term="VPS" scheme="http://mykonakona.github.io/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>我搭静态博客</title>
    <link href="http://mykonakona.github.io/2020/05/27/the-way-I-build-a-static-blog/"/>
    <id>http://mykonakona.github.io/2020/05/27/the-way-I-build-a-static-blog/</id>
    <published>2020-05-27T13:59:00.000Z</published>
    <updated>2021-01-08T07:38:04.241Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>动态博客其实一直以来都很吸引我。事实上不久之前，我还在自己的VPS上搭建了最近比较火的halo。域名、证书签发、反代的配置等等都做好了。但经过一系列的折腾，最后还是回来重新使用github page。</p><p>做出这个决定有一个重要的理由——动态博客真的贵：好的域名需要钱，线路流畅的VPS也需要钱。廉价VPS服务商的线路一言难尽，我的目的也仅止于记录自己的一些想法和兴趣，不会有更大的野心。因此权衡下来我更倾向于选择一个具有性价比的方案。</p><a id="more"></a><p>话虽如此，并不代表静态博客就完美无缺。相反，一些在动态博客中根本不能称之为问题的问题，在静态博客上就得通过各种“奇技淫巧”来解决。</p><p>因此本文基于hexo聊一聊在搭建过程中需要注意的点，同类型的生成器如pelican在使用中基本上围绕的也都是这些问题。</p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>现在流行的做法通过Travis CI自动部署github page，基本上都遵循如下步骤：</p><ol><li><p>新建一个<code>username.github.io</code>仓库，在github的<code>Settings - Developer settings - Personal access tokens</code>页面内为Travis CI新建一个github page专用，并赋予repo权限的access token；</p></li><li><p>使用github账号登陆Travis CI以完成账号关联，将access token作为<code>GH_TOKEN</code>加入到从github同步过去的仓库配置中，并在Travis CI中启用该仓库。</p></li><li><p>在本地安装npm、hexo。初始化hexo项目后，为本地项目添加.travis.yml，并完成_config.yml、.gitignore等相关配置；</p></li><li><p>为<code>username.github.io</code>新建一个<code>source</code>分支，将本地项目推送到这个source分支下。最终目的是让Travis CI根据source分支下.travis.yml中的设置的步骤生成静态文件，并把静态文件推送到<code>username.github.io</code>的<code>master</code>分支下。</p></li></ol><p>这部分的教程其实相当多了，如<a href="https://segmentfault.com/a/1190000021987832" target="_blank" rel="noopener" title="Travis CI 加 Hexo 实现自动构建部署 Github Pages 博客">1</a>。在实际搭建时，可以根据自己的情况进行调整，并不需要照搬教程。</p><h2 id="主题开发"><a href="#主题开发" class="headerlink" title="主题开发"></a>主题开发</h2><p>如果你使用了比较成熟的主题，但又希望做一些个性化的定制，比较好的一种方式是把这个主题fork到自己的github账号下。并在本地环境中拉取fork的主题。这样做之后，本地的开发环境将会有两个仓库：</p><ul><li><p><code>username.github.io</code>的<code>source</code>分支</p></li><li><p><code>hexo-theme-themename</code>的<code>master</code>分支</p></li></ul><p>由于主题是一个独立分支，因此在自动部署时，一般会把<code>source</code>下的themes文件夹加入到这个分支的<code>.gitignore</code>里去，避免发生一些可能的修改冲突。</p><p>使用时，则通过在.travis.yml添加<code>git clone</code>命令引入主题并渲染，例如：</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">before_script:</span><br><span class="line">  - npm install -g hexo-cli </span><br><span class="line">  - mkdir themes</span><br><span class="line">  - git clone https://github.com/username/hexo-theme-themename.git themes/themename</span><br><span class="line"></span><br><span class="line">script: </span><br><span class="line">  - hexo generate</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="评论服务选型"><a href="#评论服务选型" class="headerlink" title="评论服务选型"></a>评论服务选型</h2><p>对动态博客来说几乎属于标配的评论功能，在静态博客上就得通过各种奇奇怪怪的方案去实现，并且往往还并不完美。我目前使用的主题minos支持的几种评论服务，就各自存在一些缺点：</p><h3 id="disqus"><a href="#disqus" class="headerlink" title="disqus"></a>disqus</h3><p>国内网络环境下的访问实在是太慢了，非常影响浏览体验。</p><ul><li><p>一种方式是把disqus隐藏在一个按钮中，相当于用户只有在点击该评论按钮后才会加载disqus，属于一个治标不治本的方案。</p></li><li><p>如果坚持使用disqus，可以考虑参考<a href="https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/#Disqus-Lazyload" target="_blank" rel="noopener" title="使 Disqus 不再拖累性能和页面加载">2</a>，但我个人感觉还是会有拖慢。</p></li></ul><h3 id="gitment-gitalk"><a href="#gitment-gitalk" class="headerlink" title="gitment/gitalk"></a>gitment/gitalk</h3><p>单独为这类评论服务建一个存放issue仓库倒还不是最麻烦的地方，最麻烦的是每篇博文好像都得手动加issue，虽然github也有网友写了脚本完成这一工作，但易用性还是大大降低了。</p><p>另外gitment已经停止更新，一些常见问题如<a href="https://github.com/imsun/gitment/issues/100" target="_blank" rel="noopener" title="总是提示 [object XMLHttpRequestProgressEvent] #100">object XMLHttpRequestProgressEvent</a>、<a href="https://github.com/imsun/gitment/issues/178" target="_blank" rel="noopener" title="hexo博客的gitment评论开启一直失败">hexo上的开启失败</a>等只能通过网友提供的各种方案加以解决，这一点也十分劝退我。</p><h3 id="isso"><a href="#isso" class="headerlink" title="isso"></a>isso</h3><p>使用体验最好的一个，但并没有选用他。这实际上涉及的是一个理念问题：isso需要自行搭建，也就是说又得放在VPS上，那为什么不直接选用一个自带评论的动态博客方案呢，和我搭静态博客的出发点相矛盾。当然，对于不介意这点的朋友，这个服务还是推荐的。</p><h3 id="valine"><a href="#valine" class="headerlink" title="valine"></a>valine</h3><p>目前这个博客上部署的方案，没有上面一些比较恶心的问题。但leancloud这个服务能坚持多久是比较让我担心的地方……</p><p>综上所述，可以看到静态博客的评论实在是一大痛点。虽然有各种各样的解决方案，但始终只能算马马虎虎能用，难以达到动态博客的使用体验。</p><h2 id="搜索引擎收录及SEO优化"><a href="#搜索引擎收录及SEO优化" class="headerlink" title="搜索引擎收录及SEO优化"></a>搜索引擎收录及SEO优化</h2><p>目前google的网址前缀收录的推荐方式是通过校验html来完成，步骤可参考<a href="https://kennyliblog.nctu.me/2019/06/24/Google-search-Hexo-Blog/" target="_blank" rel="noopener" title="實作 - 讓 Google 能搜尋到自己的 Hexo Blog">5</a>，SEO优化方面的文章也很多，如<a href="https://juejin.im/post/5ae7fc18518825672565a7f0#heading-4" target="_blank" rel="noopener" title="Hexo 个人博客 SEO 优化（3）：改造你的博客，提升搜索引擎排名">6</a>，这里就不再赘述了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>完成这些内容后，你的静态博客相当于拥有了基本的功能。后续包括<a href="https://dengcb.com/zh/hexo-minos-multi-language/" target="_blank" rel="noopener" title="用Minos搭建Hexo全站多语言站点">全站多语言支持</a>、<a href="https://blog.skk.moe/post/img-lazyload-hexo/" target="_blank" rel="noopener" title="图片 lazyload 的学问和在 Hexo 上的最佳实践">图片懒加载</a>等等，都是可以持续优化的方面。</p><p>当然，对于一个博客来说，最重要的永远是内容。希望大家不要被各种花俏的技巧蒙蔽了双眼，为了搭博客而搭博客。而是通过搭博客培养兴趣和动手能力，在兴趣驱动下，继续分享自己的思考与创意😁</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;动态博客其实一直以来都很吸引我。事实上不久之前，我还在自己的VPS上搭建了最近比较火的halo。域名、证书签发、反代的配置等等都做好了。但经过一系列的折腾，最后还是回来重新使用github page。&lt;/p&gt;
&lt;p&gt;做出这个决定有一个重要的理由——动态博客真的贵：好的域名需要钱，线路流畅的VPS也需要钱。廉价VPS服务商的线路一言难尽，我的目的也仅止于记录自己的一些想法和兴趣，不会有更大的野心。因此权衡下来我更倾向于选择一个具有性价比的方案。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="coding" scheme="http://mykonakona.github.io/categories/coding/"/>
    
    
      <category term="hexo" scheme="http://mykonakona.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hyper-V使用记录</title>
    <link href="http://mykonakona.github.io/2020/03/31/hyper-v-sucks/"/>
    <id>http://mykonakona.github.io/2020/03/31/hyper-v-sucks/</id>
    <published>2020-03-31T14:53:00.000Z</published>
    <updated>2021-01-08T07:38:04.241Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>更新：好消息是蓝叠出了兼容Hyper-V的版本，坏消息是这个版本在我的电脑上没用起来。</p><a id="more"></a><h2 id="0-起因"><a href="#0-起因" class="headerlink" title="0. 起因"></a>0. 起因</h2><p>终于对自己一直使用的旧笔记本到了忍无可忍的地步，于是今年3月份在做了各种调研后购入了新机器（Lenove S740, i5 16G版本）。装机过程中我为了偷懒，打算直接用Win10自带的Hyper-V。自己打的如意算盘是可以省得装其他虚拟机软件，也能试一试好不好用。</p><p>首先，因为需要一个Win环境的虚拟机去跑一些国产流氓软件（比如长年在后台挂一个QQProtect进程的QQ），所以我考虑新建一个LTSC版本的Win10虚拟机。</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里有一点需要注意的是：Hyper-V给了第一代和第二代两种机器的选择。如果想传文件到第一代机器的虚拟机里，一种方法是通过设置局域网的共享文件夹，另一种好像是通过给虚拟机在硬盘上分一片虚拟硬盘的分区，两种方法都需要进行一些相对繁琐的操作和设置。所以除非需要用一些旧式驱动，一般用第二代机器就可以，因为二代机器支持增强对话，拷贝文件会比较方便且节省时间。</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="1-第一个坑"><a href="#1-第一个坑" class="headerlink" title="1. 第一个坑"></a>1. 第一个坑</h2><p>一般情况下我们装系统到新建的虚拟机，都是通过虚拟的DVD光驱加载从网上下载得到的镜像文件（ISO、DMG等）进行安装。只要在建虚拟机时勾选上使用镜像安装的选项并选好镜像，Hyper-V就会自动把DVD设备的启动顺序放在第一位（其他虚拟机软件VMWare/VirtualBox一般也是这样）。但是在实际安装最新版本的Win10 LTSC时，Hyper-V不是直接进入安装界面，而是显示提示内容如下的页面：<br></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scsi dvd the boot loader failed</span><br></pre></td></tr></tbody></table></figure><p></p><p>这说明通过DVD启动失败，没法进入镜像的安装界面。但本来这个DVD光驱就是一个虚拟设备，正常来说是不会有问题的。</p><p>google了半天才知道这里需要在虚拟机开机的时候用最快的速度按enter键才能进入系统安装界面（你也可以在开机时多按几次enter）。VMWare这一步是直接就进去了……</p><h2 id="2-第二个坑"><a href="#2-第二个坑" class="headerlink" title="2. 第二个坑"></a>2. 第二个坑</h2><p>除了需要一个隔离环境运行一些流氓软件，我还有一个需求就是用安卓模拟器看青你或者看口袋48直播。因为现在爱奇艺网站必须注册才能看它提供的所谓的“720P”的视频源，非常恶心，为了看这个“720P”只能采用通过模拟器到APP里去看。如果打开了Hyper-V功能，诸如雷电、蓝叠、mumu这类模拟器会无法使用。因为现在市面几乎所有安卓模拟器本质上都是VitrualBox架构的虚拟机，而VitrualBox会和Hyper-V冲突。这些软件一般也会被在自己的使用说明里提到要在Win下关闭Hyper-V才能正常使用。</p><p>那打开Hyper-V功能后就没法在机器上开一个安卓模拟器了吗？也是有替代方案的。要想在Hyper-V下同时使用安卓模拟器可以参考<a href="https://developer.android.com/studio/run/emulator-acceleration#vm-windows-whpx" target="_blank" rel="noopener">“使用 Windows Hypervisor Platform 配置虚拟机加速”</a>。这个方案是通过安装Android Studio(<a href="https://blog.csdn.net/chen_z_p/article/details/102637956" target="_blank" rel="noopener">国内需要改hosts</a>），使用IDE自带的模拟器去模拟。实测下来Android Studio的这个开发用模拟器是可以在打开Hyper-V的同时运行的，显示效果和流畅度也不错，但很非常吃配置。S740运行过程中CPU占用率一直是100%，这意味着不到一分钟机器就要开始产生大量发热和噪声。可能更高配置的机器可以使用这个兼容方案，但在我这里这个方案宣告失败。</p><h2 id="3-第三个坑（严格说不是Hyper-V的锅）"><a href="#3-第三个坑（严格说不是Hyper-V的锅）" class="headerlink" title="3. 第三个坑（严格说不是Hyper-V的锅）"></a>3. 第三个坑（严格说不是Hyper-V的锅）</h2><p>另一种方案是Hyper-V上装Android-x86的虚拟机。这一方案看上去很美好，但会碰到一些Android编译与开发环境的问题，难到了没有安卓经验的我。在安装镜像过程中，android-x86.org上的镜像基本上都试了个遍，有些镜像会出现键盘失效的情况，有些镜像能够正常安装，但安装完手机QQ或者微信并打开的时候，这些应用就一直弹停止提示，无法正常运行。google了下可能是由于大多数版本的Android-x86镜像基本不自带houdini的问题，导致微信、qq、口袋这些应用没法正常使用。</p><p>实在有点懒得继续再折腾。后来还试了试Win下的docker desktop，很流畅，但感觉用的人还是偏少，如果只是用来学习，应该还是基于Linux环境的讨论会比较多。</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>说了这么多，我最后把Hyper-V关了，去装了一个VMWare。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;更新：好消息是蓝叠出了兼容Hyper-V的版本，坏消息是这个版本在我的电脑上没用起来。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="coding" scheme="http://mykonakona.github.io/categories/coding/"/>
    
    
      <category term="virtualization" scheme="http://mykonakona.github.io/tags/virtualization/"/>
    
  </entry>
  
  <entry>
    <title>使用用户脚本将Flash播放器替换为HTML5播放器</title>
    <link href="http://mykonakona.github.io/2019/04/29/replace-the-flash-player-with-an-HTML5-player/"/>
    <id>http://mykonakona.github.io/2019/04/29/replace-the-flash-player-with-an-HTML5-player/</id>
    <published>2019-04-29T06:38:00.000Z</published>
    <updated>2021-01-08T07:38:04.241Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>做这个东西的动机其实是为了刷48的公演直播，本来一直在b站上看是没有问题的。但看这个月的n队N.E.W公演的那天，b站不知为何没有直播源了……</p><a id="more"></a><p>也来不及搞清楚没有源这个事情是不是又是丝芭想搞闭环，总之当时除了模拟器登口袋，好像电脑上刷直播的方法就只剩在live.48.cn上看。</p><p>然后live48不出意料地还在用flash，我的火狐进去之后就是一块白板。虽然最后临时用CentBrowser刷了一下公演，但毕竟不是我的主力浏览器，刷完之后就莫名地感觉不爽……</p><p>扒了扒greasefork，这方面脚本还是比较多的。找了一个用了dplayer的脚本<a href="https://greasyfork.org/zh-CN/scripts/378188-dilidili-flash-to-html5-fix" target="_blank" rel="noopener">dilidili flash to html5 fix</a>开始抄。抄的过程中就感觉：如果只考虑满足最基本的需求，基本上还在使用Flash播放器的视频站都可以采用这个思路通过加载用户脚本做h5播放器的替换。</p><h2 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h2><ul><li>在head或者body加载dplayer的类库和hls的类库。</li><li>触发window.onload后，清空原播放器div下的子元素，append一个新div进去用于新播放器的使用。</li><li>写一个dplayer的构造函数，配好从原页面提取的视频url、视频类型为hls等配置项即可。</li></ul><p>最后的结果可见<a href="https://greasyfork.org/zh-CN/scripts/382316" target="_blank" rel="noopener">live48 html5 player</a>。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;做这个东西的动机其实是为了刷48的公演直播，本来一直在b站上看是没有问题的。但看这个月的n队N.E.W公演的那天，b站不知为何没有直播源了……&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
      <category term="coding" scheme="http://mykonakona.github.io/categories/coding/"/>
    
    
      <category term="userscript" scheme="http://mykonakona.github.io/tags/userscript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://mykonakona.github.io/2018/05/23/hello-world/"/>
    <id>http://mykonakona.github.io/2018/05/23/hello-world/</id>
    <published>2018-05-23T16:00:00.000Z</published>
    <updated>2021-01-08T07:38:04.241Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p></p><figure class="highlight bash hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="hljs-string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p></p><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p></p><figure class="highlight bash hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p></p><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><p></p><figure class="highlight bash hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p></p><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p></p><figure class="highlight bash hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p></p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
